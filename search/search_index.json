{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Source Code: https://github.com/alexmateides/notes</p>"},{"location":"AG1/","title":"AG1","text":""},{"location":"AG1/#materialy","title":"Materi\u00e1ly","text":"<ul> <li>AG1 courses</li> <li>FIT Wiki</li> <li>Online FIT</li> </ul>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.1_Z%C3%A1kladn%C3%AD_pojmy/","title":"1.1 Z\u00e1kladn\u00ed pojmy","text":"<p>Definice 1.1 (Neorientovan\u00fd Graf)</p> <p></p> <p>Definice 1.2 (Sousedi a incidence)</p> <p></p> <p>Definice 1.3 (Sled a Cesta)</p>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.1_Z%C3%A1kladn%C3%AD_pojmy/#def-1.1","title":"Neorientovan\u00fd Graf","text":"<p>Neorientovan\u00fd graf je uspo\u0159\u00e1dan\u00e1 dvojice \\(( V , E )\\), kde:</p> <ul> <li>\\(V\\) je nepr\u00e1zdn\u00e1 kone\u010dn\u00e1 mno\u017eina vrchol\u016f</li> <li>\\(E\\) je mno\u017eina hran<ul> <li>Hrana je dvouprvkov\u00e1 podmno\u017eina \\(V\\) (\u010dili neuspo\u0159\u00e1dan\u00e1 dvojice vrchol\u016f)</li> <li>Zna\u010d\u00edme {\\(u\\) , \\(v\\)}</li> </ul> </li> </ul>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.1_Z%C3%A1kladn%C3%AD_pojmy/#def-1.2","title":"Sousedi a incidence","text":"<p>Nech\u0165 \\(e\\) = {\\(u\\), \\(v\\)} je hrana v grafu \\(G\\). Pak \u0159ekneme, \u017ee: </p> <ul> <li>vrcholy \\(u\\) a \\(v\\) jsou koncov\u00e9 vrcholy hrany \\(e\\)</li> <li>\\(u\\) je sousedem \\(v\\) v \\(G\\) (a naopak), </li> <li>\\(u\\) i \\(v\\) jsou incidentn\u00ed s hranou \\(e\\). </li> </ul>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.1_Z%C3%A1kladn%C3%AD_pojmy/#def-1.3","title":"Sled a Cesta","text":"<ul> <li>Sled d\u00e9lky \\(k\\) v grafu \\(G\\) je sekvence \\(v_{0}\\), \\(e_{1}\\), \\(v_{1}\\), \\(e_{2}\\), ... , \\(e_{k}\\), \\(v_{k}\\) takov\u00e1, \u017ee \\(e_{i}\\) = {\\(v_{i\u22121}, v_{i}\\)} a \\(e_{i}\\) \u2208 \\(E(G)\\) pro v\u0161echna \\(i\\) = 1, ... , \\(k\\).</li> <li>Cesta v grafu \\(G\\) je sled, ve kter\u00e9m se neopakuj\u00ed vrcholy (a tedy ani hrany).</li> <li>M\u00e1-li cesta P v grafu \\(G\\) koncov\u00e9 vrcholy \\(s = v_{0}\\) a \\(t = v_{k}\\), mluv\u00edme o cest\u011b z \\(s\\) do \\(t\\), nebo o s-t-cest\u011b. (P\u0159ipou\u0161t\u00edme \\(s = t\\), cesta tedy m\u016f\u017ee m\u00edt nulovou d\u00e9lku).</li> <li>D\u00e9lka s-t-cesty je po\u010det hran v t\u00e9to cest\u011b (v grafu \\(G\\)).</li> </ul>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.2_BFS/","title":"1.2 BFS","text":"<p>Algoritmus 1.1 (BFS)</p> <p></p> <p>V\u011bta 1.1 (O kone\u010dnosti algoritmu BFS)</p> D\u016fkaz v\u011bty 1.1 <ol> <li>Ka\u017ed\u00fd vrchol je p\u0159id\u00e1n do fronty \\(Q\\) nejv\u00fd\u0161e jednou, nebo\u0165 je p\u0159edt\u00edm otev\u0159en a nem\u016f\u017ee u\u017e tedy v\u00edcekr\u00e1t splnit podm\u00ednku na \u0159\u00e1dku \\((10)\\), \u017ee je nenalezen\u00fd.</li> <li>V ka\u017ed\u00e9 iteraci cyklu \\((7)\u2013(15)\\) je jeden vrchol odebr\u00e1n z fronty.</li> <li>Algoritmus se tedy zastav\u00ed nejv\u00fd\u0161e po \\(|V (G)|\\) iterac\u00edch cyklu \\((7)\u2013(15)\\)</li> </ol> <p>Pokud v\u00edme, \u017ee se algoritmus BFS(G, s) v\u017edy zastav\u00ed, m\u016f\u017eeme (a mus\u00edme) uk\u00e1zat, \u017ee v\u017edy vyd\u00e1 spr\u00e1vn\u00fd (o\u010dek\u00e1van\u00fd) v\u00fdsledek. To znamen\u00e1 dok\u00e1zat jeho 3 vlastnosti.</p> <p></p> <p>V\u011bta 1.2 (O spr\u00e1vnosti algoritmu BFS)</p> <p>P\u0159ed dokon\u010den\u00edm d\u016fkazu spr\u00e1vnosti definujme BFS f\u00e1ze a hladiny.</p> <p></p> <p>Definice 1.4 (BFS f\u00e1ze \\(F_{i}\\) a BFS hladiny \\(H_{i}\\))</p> D\u016fkaz Vlastnosti 1 <p>Po skon\u010den\u00ed BFS\\((G, s)\\) jsou uzav\u0159en\u00e9 pr\u00e1v\u011b ty vrcholy, do kter\u00fdch vede cesta ze startu s a ostatn\u00ed vrcholy z\u016fstanou nenalezen\u00e9.</p> <ol> <li>Prvn\u00edm otev\u0159en\u00fdm a n\u00e1sledn\u011b uzav\u0159en\u00fdm vrcholem je start \\(s\\).</li> <li>BFS otv\u00edr\u00e1 na \u0159\u00e1dku \\((11)\\) v\u0161echny nov\u00e9 sousedy d\u0159\u00edve otev\u0159en\u00fdch vrchol\u016f.</li> <li>(\u2287) Vrchol tedy bude otev\u0159en (a pozd\u011bji pak uzav\u0159en) pouze tehdy, kdy\u017e do n\u011bho ze startu \\(s\\) vede posloupnost sousedn\u00edch hran.</li> <li>(\u2286) Naopak, existuje-li do vrcholu n\u011bjak\u00e1 posloupnost sousedn\u00edch hran z \\(s\\), bude v pr\u016fb\u011bhu algoritmu n\u011bkdy otev\u0159en.</li> </ol> D\u016fkaz Vlastnosti 2 <p>Pro v\u0161echny uzav\u0159en\u00e9 vrcholy \\(v\\) plat\u00ed \\(D[v] = d(s, v) =\\) d\u00e9lka nejkrat\u0161\u00ed cesty ze startu \\(s\\) do vrcholu \\(v\\)</p> <ol> <li>Trivi\u00e1ln\u011b plat\u00ed ve f\u00e1zi \\(F_{0}\\). Uva\u017eujme f\u00e1zi \\(F_{i}\\), \\(i &gt; 0\\).</li> <li>Pokud \\(v \\in H_{i}\\), pak \\(D[v] = i\\) a tedy z \\(s\\) do \\(v\\) mus\u00ed existovat cesta o \\(i\\) hran\u00e1ch. Proto je vzd\u00e1lenost \\(d(s, v) \u2264 i\\).</li> <li>Uk\u00e1\u017eeme nyn\u00ed, \u017ee nem\u016f\u017ee existovat s-v-cesta krat\u0161\u00ed ne\u017e \\(i\\). Pro spor, nech\u0165 existuje cesta \\(P\\) z \\(s\\) do \\(v\\) d\u00e9lky \\(j\\), kde \\(j &lt; i\\).</li> <li>Proto\u017ee \\(j &lt; i\\), mus\u00ed dle holubn\u00edkov\u00e9ho principu na \\(P\\) existovat dva sousedn\u00ed vrcholy \\(w\\) a \\(w\u2032\\) a dv\u011b nesousedn\u00ed hladiny \\(H+{k}\\) a \\(H_{l}\\) (tedy \\(|k \u2212 \u2113| &gt; 1\\)) tak, \u017ee \\(w \\in H_{k} a w\u2032 \\in H_{l}\\).</li> <li>To v\u0161ak nen\u00ed mo\u017en\u00e9, nebo\u0165 dva sousedn\u00ed vrcholy na \\(P\\) nutn\u011b mus\u00ed le\u017eet ve dvou sousedn\u00edch hladin\u00e1ch. SPOR.</li> <li>Proto \\(d(s, v) = i = D[v]\\)</li> </ol>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.2_BFS/#algo-1.1","title":"Algoritmus BFS","text":"<p>Breadth-first search (prohled\u00e1v\u00e1n\u00ed grafu do \u0161\u00ed\u0159ky)</p> <p></p> <p>Vstup</p> <p>Neorientovan\u00fd graf \\(G = (V, E)\\) a vrchol \\(s \\in V\\)</p> <p>V\u00fdstup</p> <p>Pole vzd\u00e1lenost\u00ed \\(D\\) takov\u00e9, \u017ee:</p> \\[ D [v] = \\begin{cases}  k &amp; k \\text{ je d\u00e9lka nejkrat\u0161\u00ed s-v-cesty v } G, \\\\ \\text{undef.} &amp; \\text{neexistuje \u017e\u00e1dn\u00e1 s-v-cesta v } G   \\end{cases} \\] <p>Pole p\u0159edch\u016fdc\u016f \\(P\\) takov\u00e9, \u017ee:</p> \\[ P [v] = \\begin{cases}  w &amp; w \\text{ je p\u0159ed } v \\text{ na n\u011bjak\u00e9 nejkrat\u0161\u00ed s-v-cest\u011b v } G, \\\\ \\text{undef.} &amp; \\text{neexistuje \u017e\u00e1dn\u00e1 s-v-cesta v } G   \\end{cases} \\] <p>Algoritmus</p> <p>Algoritmus BFS(graf \\(G\\), vrchol \\(s\\))</p> <pre><code>Pro ka\u017ed\u00fd vrchol v \u2208 V (G):\n    stav[v] := nenalezen\u00fd\n    D[v] := P[v] := undef\nQ := fronta obsahuj\u00edc\u00ed jedin\u00fd vrchol s\nstav[s] := otev\u0159en\u00fd\nD[s] := 0, P[s] := \u22a5\nDokud je fronta Q nepr\u00e1zdn\u00e1:\n    Odeber z Q prvn\u00ed vrchol, nech\u0165 to je v\n    Pro v\u0161echny sousedy w vrcholu v:\n        Pokud stav[w] = nenalezen\u00fd:\n            stav[w] := otev\u0159en\u00fd\n            D[w] := D[v] + 1\n            P[w] := v\n            P\u0159idej w na konec fronty Q\n    stav[v] := uzav\u0159en\u00fd\nVra\u0165 (D, P)\n</code></pre>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.2_BFS/#theorem-1.1","title":"V\u011bta o kone\u010dnosti BFS","text":"<p>Algoritmus BFS\\((G, s)\\) se v\u017edy zastav\u00ed.</p>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.2_BFS/#theorem-1.2","title":"V\u011bta o spr\u00e1vnosti BFS","text":"<ul> <li>Vlastnost 1: Po skon\u010den\u00ed BFS\\((G, s)\\) jsou uzav\u0159en\u00e9 pr\u00e1v\u011b ty vrcholy, do kter\u00fdch vede cesta ze startu \\(s\\) a ostatn\u00ed vrcholy z\u016fstanou nenalezen\u00e9.</li> <li>Vlastnost 2: Pro v\u0161echny uzav\u0159en\u00e9 vrcholy \\(v\\) plat\u00ed \\(D[v] = d(s, v) =\\) d\u00e9lka nejkrat\u0161\u00ed cesty ze startu \\(s\\) do vrcholu \\(v\\).</li> <li>Vlastnost 3: Pro v\u0161echny uzav\u0159en\u00e9 vrcholy \\(v\\) plat\u00ed \\(P [v] = w\\), kde \\(w\\) je p\u0159edch\u016fdce \\(v\\) na n\u011bjak\u00e9 nejkrat\u0161\u00ed cest\u011b ze startu \\(s\\) do vrcholu \\(v\\).</li> </ul>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.2_BFS/#def-1.4","title":"F\u00e1ze a Hladiny BFS","text":"<ul> <li>Hladina \\(H_{0}\\) = {\\(s\\)}.</li> <li>F\u00e1ze \\(F_{0}\\) trv\u00e1 od odebr\u00e1n\u00ed \\(s\\) z \\(Q\\), otev\u0159en\u00ed a vlo\u017een\u00ed v\u0161ech jeho soused\u016f do \\(Q\\) a\u017e do uzav\u0159en\u00ed \\(s\\).</li> <li>Hladina \\(H_{i}\\) je mno\u017eina v\u0161ech vrchol\u016f otev\u0159en\u00fdch a vlo\u017een\u00fdch do  \\(Q\\) ve f\u00e1zi \\(F_{i\u22121}\\).</li> <li>F\u00e1ze \\(F_{i}\\) trv\u00e1 od konce f\u00e1ze \\(F_{i\u22121}\\) a\u017e po uzav\u0159en\u00ed v\u0161ech vrchol\u016f z \\(H_{i}\\) (zahrnuje tedy vybr\u00e1n\u00ed v\u0161ech vrchol\u016f z \\(H_{i}\\) z \\(Q\\), otev\u0159en\u00ed jejich dosud nenalezen\u00fdch soused\u016f a vlo\u017een\u00ed t\u011bchto soused\u016f do \\(Q\\)).</li> <li>Nech\u0165 \\(h\\) je \u010d\u00edslo posledn\u00ed f\u00e1ze BFS\\((G, s)\\) (po n\u00ed se BFS\\((G, s)\\) zastav\u00ed).</li> </ul>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.3_B%C4%9B%C5%BEn%C3%A9_grafy/","title":"1.3 B\u011b\u017en\u00e9 grafy","text":"<p>Definice 1.5 (\u00dapln\u00fd graf \\(K_{n}\\)  Klika)</p> <p></p> <p>Definice 1.6 (\u00dapln\u00fd bipartitn\u00ed graf \\(K_{n_{1},n_{2}}\\))</p> <p></p> <p>Definice 1.7 (Cesta \\(P_{n}\\))</p> <p></p> <p>Definice 1.8 (Kru\u017enice \\(C_{n}\\))</p> <p></p> <p>Definice 1.9 (Dopln\u011bk grafu)</p> <p></p> <p>Definice 1.10 (Okol\u00ed vrcholu, stupe\u0148 vrcholu)</p> <p>Plat\u00ed tedy \\(deg_{G}(v) = |N_{G}(v)|\\)</p> <p></p> <p>Definice 1.11 (Regul\u00e1rn\u00ed graf)</p> <p></p> <p>Definice 1.12 (Izolovan\u00fd vrchol)</p> K zamy\u0161len\u00ed <ul> <li>Jak vypad\u00e1 0-regul\u00e1rn\u00ed graf o n vrcholech?</li> <li>Jak vypad\u00e1 1-regul\u00e1rn\u00ed graf o n vrcholech?</li> <li>Existuje 1-regul\u00e1rn\u00ed graf s lich\u00fdm po\u010dtem vrchol\u016f?</li> <li>Jak vypad\u00e1 2-regul\u00e1rn\u00ed graf o n vrcholech?</li> <li>Existuje 2-regul\u00e1rn\u00ed graf s lich\u00fdm po\u010dtem vrchol\u016f?</li> <li>Kolik existuje neizomorfn\u00edch 2-regul\u00e1rn\u00edch graf\u016f o n vrcholech?</li> </ul> <p></p> <p>V\u011bta 1.3 (O principu sudosti)</p> D\u016fkaz V\u011bty 1.3 <p>Pos\u010d\u00edt\u00e1me-li stupn\u011b v\u0161ech vrchol\u016f, zapo\u010d\u00edt\u00e1me ka\u017edou hranu p\u0159esn\u011b dvakr\u00e1t, co\u017e d\u00e1v\u00e1 sou\u010det \\(2|E|\\).</p> \\[ \\begin{align} &amp; \\sum_{u \\in V}{deg_{G}(v) = 2|E|} = \\sum_{u \\in V}{N_{G}(v) = 2|E|} = \\sum_{u \\in V}{|\\{u \\in V | \\{u,v\\} \\in E \\}|} \\\\ \\\\ &amp; = \\sum_{u \\in V}{|\\{e \\in E | v \\in e \\}|} = \\sum_{u \\in V}{}\\sum_{e \\in E | v \\in e}{1} = \\sum_{e \\in E}{2} = 2 |E| \\end{align} \\] <p>D\u016fsledek 1.1</p> <p>V\u011bta o principu sudosti m\u00e1 \u0159adu d\u016fsledk\u016f.</p> <ol> <li>V ka\u017ed\u00e9m grafu je po\u010det vrchol\u016f lich\u00e9ho stupn\u011b sud\u00fd.</li> <li>Ka\u017ed\u00fd regul\u00e1rn\u00ed graf lich\u00e9ho stupn\u011b mus\u00ed m\u00edt sud\u00fd po\u010det vrchol\u016f.</li> </ol> <p></p> <p>Definice 1.13 (Podgraf)</p> <p></p> <p>Definice 1.14 (Bipartitn\u00ed graf)</p> <p></p> <p>Definice 1.15 (Klika v grafu \\(G\\))</p> <p></p> <p>Definice 1.16 (Orientovan\u00fd graf)</p>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.3_B%C4%9B%C5%BEn%C3%A9_grafy/#def-1.5","title":"\u00dapln\u00fd graf - Klika","text":"<ul> <li>Nech\u0165 \\(n \u2265 1\\).</li> <li>\u00dapln\u00fd graf na \\(n\\) vrcholech \\(K_{n}\\) je graf \\((V, \\binom{V}{2} )\\), kde \\(|V| = n\\).</li> </ul>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.3_B%C4%9B%C5%BEn%C3%A9_grafy/#def-1.6","title":"\u00dapln\u00fd bipartitn\u00ed graf","text":"<ul> <li>Nech\u0165 \\(n_{1} \u2265 1\\) a \\(n_{2} \u2265 1\\).</li> <li>\u00dapln\u00fd bipartitn\u00ed graf \\(K_{n_{1},n_{2}}\\) tvo\u0159en\u00fd dv\u011bma partitami o \\(n_{1}\\) a \\(n_{2}\\) vrcholech je graf \\((A \\cup B\\), {{\\(a\\), \\(b\\)} | \\(a \\in A, b \\in B\\)}), kde \\(A \\cap B = \\emptyset, |A| = n_{1}\\) a \\(|B| = n_{2}\\).</li> </ul>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.3_B%C4%9B%C5%BEn%C3%A9_grafy/#def-1.7","title":"Cesta","text":"<ul> <li>Nech\u0165 \\(n \u2265 1\\).</li> <li>Cesta s \\(n\\) vrcholy (s \\(n \u2212 1\\) hranami) \\(P_{n}\\) je graf:  ({\\(1, . . . , n\\)}, {{\\(i, i + 1\\)} | \\(i \\in\\) {\\(1, . . . , n \u2212 1\\)}}).</li> </ul>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.3_B%C4%9B%C5%BEn%C3%A9_grafy/#def-1.8","title":"Kru\u017enice","text":"<ul> <li>Nech\u0165 \\(n \u2265 3\\)</li> <li>Kru\u017enice d\u00e9lky \\(n\\) (s \\(n\\) vrcholy) \\(C_{n}\\) je graf ({\\(1, . . . , n\\)}, {{\\(i, i + 1\\)} | \\(i \\in\\) {\\(1, . . . , n \u2212 1\\)}} \\(\\cup\\) {{\\(n, 1\\)}})</li> </ul>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.3_B%C4%9B%C5%BEn%C3%A9_grafy/#def-1.9","title":"Dopln\u011bk grafu","text":"<p>Dopln\u011bk \\(\\overline{G}\\) grafu \\(G = (V, E)\\) je graf \\((V, (\\binom{V}{2}) \\setminus E)\\).</p>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.3_B%C4%9B%C5%BEn%C3%A9_grafy/#def-1.10","title":"Okol\u00ed vrcholu a stupe\u0148 vrcholu","text":"<p>Nech\u0165 \\(G = (V, E)\\) je graf a \\(v \\in V\\) jeho vrchol.</p> <ul> <li>Symbolem \\(deg_{G}(v)\\) ozna\u010d\u00edme po\u010det hran grafu \\(G\\) obsahuj\u00edc\u00edch vrchol \\(v\\).  Toto \u010d\u00edslo nazveme stupn\u011bm vrcholu \\(v\\) v grafu \\(G\\).</li> <li>Symbolem \\(N_{G}(v)\\) ozna\u010d\u00edme mno\u017einu v\u0161ech soused\u016f vrcholu \\(v\\) v grafu \\(G\\).  Tuto mno\u017einu nazveme (otev\u0159en\u00e9) okol\u00ed vrcholu \\(v\\) v grafu \\(G\\).</li> <li>Mno\u017einu \\(N_{G}[v] = N_{G}(v) \\cup \\{v\\}\\) nazveme uzav\u0159en\u00fdm okol\u00edm vrcholu \\(v\\) v grafu \\(G\\).</li> </ul>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.3_B%C4%9B%C5%BEn%C3%A9_grafy/#def-1.11","title":"Regul\u00e1rn\u00ed graf","text":"<ul> <li>Graf je r-regul\u00e1rn\u00ed, pokud stupe\u0148 ka\u017ed\u00e9ho jeho vrcholu je \\(r\\).</li> <li>Graf je regul\u00e1rn\u00ed, pokud je r-regul\u00e1rn\u00ed pro n\u011bjak\u00e9 \\(r\\).</li> </ul>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.3_B%C4%9B%C5%BEn%C3%A9_grafy/#def-1.12","title":"Izolovan\u00fd vrchol","text":"<ul> <li>Vrchol stupn\u011b \\(0\\) nazveme izolovan\u00fd (nem\u00e1 \u017e\u00e1dn\u00e9 sousedy).</li> </ul>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.3_B%C4%9B%C5%BEn%C3%A9_grafy/#theorem-1.3","title":"V\u011bta o principu sudosti","text":"<p>Pro ka\u017ed\u00fd graf \\(G = (V, E)\\) plat\u00ed:</p> \\[ \\sum_{u \\in V}{deg_{G}(v) = 2|E|} \\]"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.3_B%C4%9B%C5%BEn%C3%A9_grafy/#def-1.13","title":"Podgraf","text":"<ul> <li>Graf \\(H\\) je podgrafem grafu \\(G\\), kdy\u017e \\(V (H) \\subseteq V (G)\\) a \\(E(H) \\subseteq E(G)\\). </li> <li>Graf \\(H\\) je indukovan\u00fdm podgrafem grafu \\(G\\), kdy\u017e \\(V (H) \\subseteq V (G)\\) a \\(E(H) = E(G) \\cap \\binom{V(H)}{2}\\). </li> <li>Je-li \\(G = (V, E)\\) a \\(V' \\subseteq V\\) , pak \\(G[V']\\) ozna\u010duje graf s mno\u017einou vrchol\u016f \\(V'\\) a mno\u017einou hran \\(E(G) \\cap \\binom{V'}{2}\\).  \u0158\u00edk\u00e1me, \u017ee \\(G[V']\\) je podgraf indukovan\u00fd mno\u017einou vrchol\u016f \\(V'\\).  Graf \\(G[V \\setminus V']\\) budeme zapisovat zkr\u00e1cen\u011b \\(G \u2212 V'\\).  A speci\u00e1ln\u011b, pokud \\(V' = \\{v\\}\\), pak p\u00ed\u0161eme \\(G \u2212 v\\) m\u00edsto \\(G \u2212 \\{v\\}\\)</li> </ul>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.3_B%C4%9B%C5%BEn%C3%A9_grafy/#def-1.14","title":"Bipartitn\u00ed graf","text":"<p>Podgraf \u00fapln\u00e9ho bipartitn\u00edho grafu je bipartitn\u00ed graf</p>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.3_B%C4%9B%C5%BEn%C3%A9_grafy/#def-1.15","title":"Klika v grafu G","text":"<p>Klika v grafu G je podmno\u017eina vrchol\u016f, z nich\u017e ka\u017ed\u00e9 dva jsou sousedn\u00ed (\u010dili spojeny hranou).</p>"},{"location":"AG1/01_z%C3%A1klady_graf%C5%AF/1.3_B%C4%9B%C5%BEn%C3%A9_grafy/#def-1.16","title":"Orientovan\u00fd graf","text":"<p>Orientovan\u00fd graf \\(G\\) je uspo\u0159\u00e1dan\u00e1 dvojice \\((V, E)\\), kde</p> <ul> <li>\\(V\\) je nepr\u00e1zdn\u00e1 kone\u010dn\u00e1 mno\u017eina vrchol\u016f a</li> <li>\\(E\\) je mno\u017eina orientovan\u00fdch hran (zobrazujeme jako \u0161ipky).</li> </ul> <p>Orientovan\u00e1 hran a \\((u, v) \\in E\\) je uspo\u0159\u00e1dan\u00e1 dvojice vrchol\u016f \\(u, v \\in V\\) .  \u0158\u00edk\u00e1me, \u017ee \\(u\\) je p\u0159edch\u016fdce \\(v\\) a \\(v\\) je n\u00e1sledn\u00edk \\(u\\).  \u0158\u00edk\u00e1me, \u017ee orientovan\u00e1 hrana \\((u, u)\\) je smy\u010dka.</p>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.1_Souvislost_graf%C5%AF/","title":"2.1 Souvislost graf\u016f","text":""},{"location":"AG1/02_Souvislost_graf%C5%AF/2.1_Souvislost_graf%C5%AF/#souvislost-neorientovanych-grafu","title":"Souvislost (neorientovan\u00fdch) graf\u016f","text":"<p>Definice 2.1 (Souvislost grafu)</p> <p></p> <p>Definice 2.2 (Souvisl\u00e1 komponenta)</p> <p>Pozorov\u00e1n\u00ed</p> <p>Graf je souvisl\u00fd pr\u00e1v\u011b tehdy, kdy\u017e obsahuje jedinou souvislou komponentu.</p> <p>Tvrzen\u00ed</p> <p>Bin\u00e1rn\u00ed relace \\(\\leftrightsquigarrow\\) nad vrcholy grafu \\(G\\) definovan\u00e1 p\u0159edpisem</p> \\[ u \\leftrightsquigarrow v \\iff \\exists\\text{ } u\\text{-}v\\text{-cesta v } G \\] <p>je ekvivalence, jej\u00ed\u017e t\u0159\u00eddy ekvivalence indukuj\u00ed souvisl\u00e9 komponenty grafu \\(G\\).</p>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.1_Souvislost_graf%C5%AF/#def-2.1","title":"Souvislost grafu","text":"<p>Graf \\(G\\) je souvisl\u00fd, jestli\u017ee v n\u011bm pro ka\u017ed\u00e9 jeho dva vrcholy \\(u\\), \\(v\\) existuje u-v-cesta.  Jinak je \\(G\\) nesouvisl\u00fd.</p>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.1_Souvislost_graf%C5%AF/#def-2.2","title":"Souvisl\u00e1 komponenta","text":"<p>Indukovan\u00fd podgraf \\(H\\) grafu \\(G\\) je souvislou komponentou, pokud:</p> <ul> <li>je souvisl\u00fd a </li> <li>neexistuje \u017e\u00e1dn\u00fd souvisl\u00fd podgraf \\(F\\) , \\(F \\neq H\\), grafu \\(G\\) takov\u00fd, \u017ee \\(H \\subseteq F\\).</li> </ul> <p>Souvisl\u00e1 komponenta je tedy v inkluzi maxim\u00e1ln\u00ed souvisl\u00fd podgraf grafu \\(G\\).</p>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.1_Souvislost_graf%C5%AF/#souvislost-orientovanych-grafu","title":"Souvislost orientovan\u00fdch graf\u016f","text":"<ul> <li>Pojmy souvislost a souvisl\u00e1 komponenta neorientovan\u00fdch graf\u016f nelze jednodu\u0161e pou\u017e\u00edt pro orientovan\u00e9 grafy.</li> </ul> <p>Definice 2.3 (Symetrizace orientovan\u00e9ho grafu)</p> <p>Symetrizace tedy odstran\u00ed z grafu informace o orientaci hran.</p> <p></p> <p>Definice 2.4 (Slab\u00e1 souvislost orientovan\u00e9ho grafu)</p> <p>Testovat slabou souvislost orientovan\u00e9ho grafu tedy znamen\u00e1 testovat, nap\u0159. pomoc\u00ed algoritmu BFS, souvislost jeho symetrizace, co\u017e je neorientovan\u00fd graf.</p> <p></p> <p>Definice 2.5 (Siln\u00e1 souvislost orientovan\u00e9ho grafu)</p>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.1_Souvislost_graf%C5%AF/#def-2.3","title":"Symetrizace orientovan\u00e9ho grafu","text":"<p>Symetrizace orientovan\u00e9ho grafu \\(G = (V, E)\\) je neorientovan\u00fd graf  sym\\((G) = (V, E')\\), kde:  \\(\\phantom{XXXX}\\{u, v\\} \\in E'\\) pr\u00e1v\u011b tehdy, kdy\u017e \\((u, v) \\in E\\) nebo \\((v, u) \\in E\\).</p>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.1_Souvislost_graf%C5%AF/#def-2.4","title":"Slab\u00e1 souvislost orientovan\u00e9ho grafu","text":"<p>Orientovan\u00fd graf \\(G = (V, E)\\) nazveme slab\u011b souvisl\u00fd, pokud je souvisl\u00e1 jeho symetrizace sym\\((G)\\).</p>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.1_Souvislost_graf%C5%AF/#def-2.5","title":"Siln\u00e1 souvislost orientovan\u00e9ho grafu","text":"<p>Orientovan\u00fd graf \\(G = (V, E)\\) nazveme siln\u011b souvisl\u00fd, pokud pro ka\u017ed\u00e9 dva vrcholy \\(u, v \\in V\\) existuje v \\(G\\) orientovan\u00e1 cesta z \\(u\\) do \\(v\\) a sou\u010dasn\u011b orientovan\u00e1 cesta z \\(v\\) do \\(u\\).</p>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.1_Souvislost_graf%C5%AF/#vysetrovani-souvislosti-grafu","title":"Vy\u0161et\u0159ov\u00e1n\u00ed souvislosti grafu","text":"<p>\u00daloha vy\u0161et\u0159ov\u00e1n\u00ed souvislosti grafu \\(G\\) m\u00e1 r\u016fzn\u00e9 podoby, nap\u0159.: </p> <ol> <li>Zjistit, zda je \\(G\\) souvisl\u00fd.</li> <li>Pokud nen\u00ed, identifikovat v\u0161echny souvisl\u00e9 komponenty.</li> <li>Je-li zad\u00e1n vrchol \\(s\\), zkonstruovat souvislou komponentu, do kter\u00e9 \\(s\\) pat\u0159\u00ed.</li> </ol> <p>Vstup: Graf \\(G\\) a jeden jeho vrchol \\(s\\).  V\u00fdstup: Graf \\(s\\) ozna\u010denou souvislou komponentou, ve kter\u00e9 le\u017e\u00ed vrchol \\(s\\).</p> <p>Vstup: Graf \\(G\\) a jeden jeho vrchol \\(s\\).  V\u00fdstup: Graf \\(s\\) ozna\u010den\u00fdmi souvis\u00fdmi komponentami.</p> <p></p> <p>Algoritmus 2.1 (BFS_graf)</p> <p></p> <p>Algoritmus 2.2 (DFS_graf)</p>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.1_Souvislost_graf%C5%AF/#algo-2.1","title":"BFS_graf","text":"Algoritmus BFS_graf (graf G):<pre><code>Pro ka\u017ed\u00fd vrchol u \u2208 V (G):\n    stav[u] := nenalezen\u00fd\n    D[u] := P[u] := undef\nPro ka\u017ed\u00fd vrchol s \u2208 V (G):\n    Pokud stav[s] = nenalezen\u00fd:\n        BFS(G, s) \n</code></pre> BFS(graf G, vrchol s):<pre><code>Q := fronta obsahuj\u00edc\u00ed s\nstav[s] := otev\u0159en\u00fd, D[s] := 0, P[s] := \u22a5\nDokud je fronta Q nepr\u00e1zdn\u00e1:\n    Odeber z Q prvn\u00ed vrchol \u2192 v\n    Pro v\u0161echny sousedy w vrcholu v:\n        Pokud stav[w] = nenalezen\u00fd:\n            stav[w]:= otev\u0159en\u00fd\n            D[w]:= D[v]+1, P[w]:= v\n            P\u0159idej w na konec Q\n    stav[v] := uzav\u0159en\u00fd\n</code></pre>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.1_Souvislost_graf%C5%AF/#algo-2.2","title":"DFS_graf","text":"Algoritmus DFS_graf (graf G, vrchol s):<pre><code>Pro ka\u017ed\u00fd vrchol u \u2208 V (G):\n    stav[u] := nenalezen\u00fd\nDFS[s]\n</code></pre> DFS (vrchol v):<pre><code>Pokud stav[v] = otev\u0159en\u00fd nebo uzav\u0159en\u00fd:\n    return\nstav[v] := otev\u0159en\u00fd\nPro ka\u017ed\u00e9ho souseda u vrcholu v:\n    DFS[u]\nstav[v] := uzav\u0159en\u00fd\n</code></pre>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.2_Reprezentace_graf%C5%AF/","title":"2.2 Reprezentace graf\u016f","text":""},{"location":"AG1/02_Souvislost_graf%C5%AF/2.2_Reprezentace_graf%C5%AF/#ram-a-slozitost","title":"RAM a slo\u017eitost","text":"<p>Definice 2.6 (V\u00fdpo\u010detn\u00ed model RAM)</p> <p></p> <p>Definice 2.7 (Slo\u017eitost programu)</p>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.2_Reprezentace_graf%C5%AF/#def-2.6","title":"V\u00fdpo\u010detn\u00ed model RAM","text":"<p>Random Access Machine</p> <ul> <li>Pam\u011b\u0165 RAMu tvo\u0159\u00ed pole celo\u010d\u00edseln\u00fdch pam\u011b\u0165ov\u00fdch bun\u011bk adresovateln\u00fdch cel\u00fdmi \u010d\u00edsly.</li> <li>Program je kone\u010dn\u00e1 posloupnost sekven\u010dn\u011b prov\u00e1d\u011bn\u00fdch instrukc\u00ed dvou typ\u016f:   aritmeticko-logick\u00fdch a \u0159\u00eddic\u00edch.</li> <li>Aritmeticko-logick\u00e9 instrukce maj\u00ed obvykle dva vstupn\u00ed argumenty a jeden v\u00fdstupn\u00ed argument. Argument m\u016f\u017ee b\u00fdt:<ul> <li>p\u0159\u00edm\u00e1 konstanta (s v\u00fdjimkou v\u00fdstupn\u00edho argumentu),</li> <li>p\u0159\u00edmo adresovan\u00e1 pam\u011b\u0165ov\u00e1 bu\u0148ka (adresa je p\u0159\u00edmo zad\u00e1na),</li> <li>nep\u0159\u00edmo adresovan\u00e1 pam\u011b\u0165ov\u00e1 bu\u0148ka (jej\u00ed adresa je ulo\u017eena v p\u0159\u00edmo adresovan\u00e9 bu\u0148ce).</li> </ul> </li> <li>\u0158\u00eddic\u00ed instrukce jsou skoky (na konkr\u00e9tn\u00ed instrukci programu), podm\u00edn\u011bn\u00e9 skoky (nap\u0159\u00edklad kdy\u017e se dva argumenty instrukce rovnaj\u00ed) a instrukci zastaven\u00ed programu.</li> </ul> <ul> <li>Na za\u010d\u00e1tku v\u00fdpo\u010dtu obsahuje pam\u011b\u0165 v ur\u010den\u00fdch bu\u0148k\u00e1ch vstup a obsah ostatn\u00edch bun\u011bk je nedefinov\u00e1n.</li> <li>Potom je program sekven\u010dn\u011b prov\u00e1d\u011bn, instrukce za instrukc\u00ed.</li> <li>Procesor v ka\u017ed\u00e9m kroku provede pr\u00e1v\u011b jednu instrukci.</li> <li>Po zastaven\u00ed programu je obsah pam\u011bti v ur\u010den\u00fdch bu\u0148k\u00e1ch interpretov\u00e1n jako v\u00fdstup programu</li> </ul>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.2_Reprezentace_graf%C5%AF/#def-2.7","title":"Slo\u017eitost programu","text":"<ul> <li>Velikost vstupu je po\u010det pam\u011b\u0165ov\u00fdch bun\u011bk, kter\u00e9 vstup zab\u00edr\u00e1.</li> <li>\u010casov\u00e1 slo\u017eitost programu (v nejhor\u0161\u00edm p\u0159\u00edpad\u011b) pro vstup velikosti \\(N\\) je maximum z po\u010dtu vykonan\u00fdch instrukc\u00ed p\u0159es v\u0161echny mo\u017en\u00e9 (povolen\u00e9) vstupy velikosti nejv\u00fd\u0161e \\(N\\).</li> <li>Pam\u011b\u0165ov\u00e1 slo\u017eitost programu (v nejhor\u0161\u00edm p\u0159\u00edpad\u011b) pro vstup velikosti \\(N\\) je maximum z po\u010dtu pou\u017eit\u00fdch pam\u011b\u0165ov\u00fdch bun\u011bk p\u0159es v\u0161echny mo\u017en\u00e9 (povolen\u00e9) vstupy velikosti nejv\u00fd\u0161e \\(N\\).</li> </ul>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.2_Reprezentace_graf%C5%AF/#reprezentace-grafu","title":"Reprezentace grafu","text":"<p>Jak reprezentovat (neorientovan\u00e9) grafy v pam\u011bti po\u010d\u00edta\u010de?</p> <ul> <li>Matice sousednosti</li> <li>Seznam soused\u016f</li> </ul> <p></p> <p>Definice 2.8 (Matice sousednosti)</p> <p>Pozorov\u00e1n\u00ed</p> <ul> <li>\\(A_{G}\\) je symetrick\u00e1 matice</li> <li>Pam\u011b\u0165ov\u00e1 n\u00e1ro\u010dnost reprezentace: \\(O(n^{2})\\)</li> </ul> <p></p> <p>Definice 2.9 (Seznam soused\u016f)</p> <p>Pozorov\u00e1n\u00ed</p> <p>Celkem tedy pam\u011b\u0165ov\u00e1 slo\u017eitost: \\(O(n + m)\\).</p>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.2_Reprezentace_graf%C5%AF/#def-2.8","title":"Matice sousednosti","text":"<p>Nech\u0165 \\(G = (V, E)\\) je graf s \\(V = \\{v_{1}, v_{2}, ... , v_{n}\\}\\).  Matice sousednosti grafu \\(G\\) je \u010dtvercov\u00e1 matice \\(A_{G} = (a_{i,j} )^{n}_{i,j=1}\\) </p> \\[ a_{i,j} = \\begin{cases}  1 &amp; \\text{kdy\u017e } \\{v_{i}, v_{j}\\} \\in E, \\\\ 0 &amp; \\text{jinak} \\\\ \\end{cases} \\]"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.2_Reprezentace_graf%C5%AF/#def-2.9","title":"Seznam soused\u016f","text":"<p>Pro ka\u017ed\u00fd vrchol v grafu \\(G = (V, E)\\) uchov\u00e1v\u00e1me seznam jeho soused\u016f (nap\u0159. spojov\u00fd seznam).  Pam\u011b\u0165ov\u00e1 slo\u017eitost: \\(|V|\\) za\u010d\u00e1tk\u016f seznam\u016f a dohromady \\(2|E|\\) prvk\u016f v seznamech (ka\u017ed\u00e1 hrana znamen\u00e1 dva v\u00fdskyty).</p>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.2_Reprezentace_graf%C5%AF/#orientovany-graf","title":"Orientovan\u00fd graf","text":"<p>Orientovan\u00e9 grafy reprezentujeme ve stejn\u00fdch struktur\u00e1ch jako neorientovan\u00e9 grafy:</p> <ul> <li>matic\u00ed sousednosti</li> <li>seznamem soused\u016f</li> </ul> <p>pouze m\u00edsto seznamu soused\u016f \u0159\u00edk\u00e1me seznam n\u00e1sledn\u00edk\u016f:</p>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.2_Reprezentace_graf%C5%AF/#analyza-casove-slozitosti-bfs","title":"Anal\u00fdza \u010dasov\u00e9 slo\u017eitosti BFS","text":"<p>V\u011bta 2.1 (O \u010dasov\u00e9 slo\u017eitosti algoritmu BFS_graf)</p> D\u016fkaz V\u011bty 2.1 <ol> <li>V glob\u00e1ln\u00edm seznamu stavu vrchol\u016f se ka\u017ed\u00fd vrchol vyjme nanejv\u00fd\u0161 jednou a pot\u00e9 se pust\u00ed BFS z n\u011bho.</li> <li>Ka\u017ed\u00fd vrchol je p\u0159id\u00e1n do fronty \\(Q\\) nejv\u00fd\u0161e jednou.</li> <li>V ka\u017ed\u00e9 iteraci cyklu \\((9)\\)\u2013\\((16)\\) je jeden vrchol odebr\u00e1n z fronty, tento cyklus m\u00e1 tedy nejv\u00fd\u0161e \\(|V|\\) iterac\u00ed.</li> <li>Celkov\u00fd po\u010det iterac\u00ed cyklu \\((11)\\)\u2013\\((15)\\) je nejv\u00fd\u0161e dvakr\u00e1t tolik, kolik je v grafu hran  (nebo\u0165 pro ka\u017ed\u00fd vrchol proch\u00e1z\u00edme jen hrany a vrcholy v jeho komponent\u011b souvislosti).</li> <li>Celkov\u00e1 \u010dasov\u00e1 slo\u017eitost je tedy \\(O(|V| + |E|)\\).</li> </ol>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.2_Reprezentace_graf%C5%AF/#veta-o-casove-slozitosti-bfs","title":"V\u011bta o \u010dasov\u00e9 slo\u017eitosti BFS","text":"<p>Algoritmus BFS_graf(\\(G\\)) m\u00e1 p\u0159i reprezentaci grafu \\(G\\) seznamem soused\u016f \u010dasovou slo\u017eitost \\(O(|V| + |E|)\\).</p>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.3_Izomorfismus/","title":"2.3 Izomorfismus","text":"<p>Definice 2.10 (Izomorfismus graf\u016f)</p> <p></p> <p>Definice 2.11 (Automorfismus grafu)</p> <ul> <li>Neform\u00e1ln\u011b \u0159e\u010deno: Automorfismus je permutace vrchol\u016f, zachov\u00e1vaj\u00edc\u00ed \"b\u00fdti hranou\". </li> <li>Automorfismy ukazuj\u00ed \"symetrie\" grafu. </li> <li>Mno\u017estv\u00ed automorfism\u016f tedy ukazuje na m\u00edru pravidelnosti grafu.</li> </ul> <p></p> <p>Pozorov\u00e1n\u00ed 2.1 (O po\u010dtu graf\u016f)</p>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.3_Izomorfismus/#def-2.10","title":"Izomorfismus graf\u016f","text":"<p>Nech\u0165 \\(G\\) a \\(H\\) jsou dva grafy.  Funkce \\(f : V (G) \u2192 V (H)\\) je izomorfismus graf\u016f \\(G\\) a \\(H\\), pokud</p> <ul> <li>\\(f\\) je bijekce</li> <li>a pro ka\u017edou dvojici vrchol\u016f \\(u\\), \\(v\\) z \\(V(G)\\) plat\u00ed  \\(\\{u, v\\} \\in E(G)\\) pr\u00e1v\u011b tehdy, kdy\u017e \\(\\{f (u), f (v)\\} \\in E(H)\\).</li> </ul> <p>Dva grafy \\(G\\) a \\(H\\) jsou izomorfn\u00ed, pokud existuje izomorfismus graf\u016f \\(G\\) a \\(H\\).  Tento fakt zna\u010d\u00edme \\(G \\simeq H\\)</p>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.3_Izomorfismus/#def-2.11","title":"Automorfismus grafu","text":"<p>Automorfismus grafu \\(G\\) je izomorfismus se sebou sam\u00fdm,  tedy funkce \\(f : V (G) \\to V (G)\\) takov\u00e1, \u017ee</p> <ul> <li>\\(f\\) je bijekce</li> <li>a pro ka\u017edou dvojici vrchol\u016f \\(u, v \\in V(G)\\) plat\u00ed  \\(\\{u, v\\} \\in E(G)\\) pr\u00e1v\u011b tehdy, kdy\u017e \\(\\{f (u), f (v)\\} \\in E(G)\\).</li> </ul>"},{"location":"AG1/02_Souvislost_graf%C5%AF/2.3_Izomorfismus/#implication-2.1","title":"Pozorov\u00e1n\u00ed o po\u010dtu graf\u016f","text":"<p>Na \\(n\\)-prvkov\u00e9 mno\u017ein\u011b vrchol\u016f \\(V\\) je pr\u00e1v\u011b \\(2^{\\binom{n}{2}}\\) r\u016fzn\u00fdch graf\u016f</p> <ul> <li>Navz\u00e1jem neizomorfn\u00edch graf\u016f na \\(V\\) je m\u00e9n\u011b.</li> <li>Nap\u0159. pro \\(V = \\{1, 2, 3\\}\\) dost\u00e1v\u00e1me \\(2^\\binom{3}{2}\\) = \\(2^{3}\\) = 8 v\u0161ech graf\u016f, z nich\u017e ale jen 4 jsou neizomorfn\u00ed.</li> <li>Pozn.: Binomi\u00e1ln\u00ed \u010d\u00edslo \\(\\binom{n}{k}\\) ozna\u010duje po\u010det \\(k\\)-prvkov\u00fdch podmno\u017ein z \\(n\\)-prvkov\u00e9 mno\u017einy.</li> </ul>"},{"location":"AG1/03_Stromy/3.1_Z%C3%A1kladn%C3%AD_pojmy/","title":"3.1 Z\u00e1kladn\u00ed pojmy","text":""},{"location":"AG1/03_Stromy/3.1_Z%C3%A1kladn%C3%AD_pojmy/#strom-les-list","title":"Strom, Les, List","text":"<p>Definice 3.1 (Strom)</p> <p></p> <p>Definice 3.2 (Les)</p> <p></p> <p>Definice 3.3 (List)</p> <p></p> <p>V\u011bta 3.1 (o existenci list\u016f)</p> D\u016fkaz V\u011bty 3.1 <ol> <li>Nech\u0165 \\(P\\) je nejdel\u0161\u00ed cesta v \\(T\\).</li> <li>Nech\u0165 \\(u\\) a \\(v\\) jsou jej\u00ed koncov\u00e9 vrcholy.</li> <li>Sporem uk\u00e1\u017eeme, \u017ee \\(u\\) a \\(v\\) jsou listy.</li> <li>Kdyby z \\(u\\) vedly aspo\u0148 dv\u011b hrany, jedna z nich bude pat\u0159it do \\(u\\)-\\(v\\)-cesty \\(P\\) a zb\u00fdvat bude je\u0161t\u011b aspo\u0148 jedna hrana \\(e = \\{u, w\\}\\).</li> <li>Kdyby \\(w \\in V(P)\\), byla by v \\(T\\) kru\u017enice.</li> <li>Kdyby \\(w \\notin V(P)\\), cesta \\(P\\) by \u0161la prodlou\u017eit a nebyla by tedy nejdel\u0161\u00ed.</li> <li>To sam\u00e9 plat\u00ed pro koncov\u00fd vrchol \\(v\\) - SPOR.</li> </ol> <p>Proto\u017ee cesty jsou stromy, existuj\u00ed stromy, maj\u00edc\u00ed pr\u00e1v\u011b dva listy.</p>"},{"location":"AG1/03_Stromy/3.1_Z%C3%A1kladn%C3%AD_pojmy/#def-3.1","title":"Strom","text":"<p>Graf \\(G\\) nazveme stromem, pokud je souvisl\u00fd a neobsahuje \u017e\u00e1dnou kru\u017enici (\u010dili je acyklick\u00fd).</p>"},{"location":"AG1/03_Stromy/3.1_Z%C3%A1kladn%C3%AD_pojmy/#def-3.2","title":"Les","text":"<p>Graf \\(G\\) nazveme lesem, pokud neobsahuje \u017e\u00e1dnou kru\u017enici. </p>"},{"location":"AG1/03_Stromy/3.1_Z%C3%A1kladn%C3%AD_pojmy/#def-3.3","title":"List","text":"<p>Vrchol v grafu \\(G\\) nazveme listem, pokud \\(deg_{G}(v) = 1\\).</p>"},{"location":"AG1/03_Stromy/3.1_Z%C3%A1kladn%C3%AD_pojmy/#theorem-3.1","title":"V\u011bta o existenci list\u016f","text":"<p>Ka\u017ed\u00fd strom \\(T\\) s aspo\u0148 \\(2\\) vrcholy obsahuje aspo\u0148 dva listy.</p>"},{"location":"AG1/03_Stromy/3.1_Z%C3%A1kladn%C3%AD_pojmy/#listy-kruznice-a-souvislost-v-grafech","title":"Listy, kru\u017enice a souvislost v grafech","text":"<ul> <li>Uva\u017eujme graf \\(G = (V, E)\\), ve kter\u00e9m existuje list \\(v\\). Ozna\u010dme  \\(w\\) jeho souseda v \\(G\\). Pak odebr\u00e1n\u00ed listu \\(v\\) z \\(G\\) je operace, kterou vznikne graf \\(G \u2212 v = (V \\setminus \\{v\\}, E \\setminus \\{\\{w, v\\}\\})\\).</li> <li>Uva\u017eujme graf \\(G = (V, E)\\) a zvolme \\(w \\in V\\) . Pak p\u0159id\u00e1n\u00ed listu \\(v\\) k vrcholu \\(w, v \\notin V\\) , ke grafu \\(G\\) je operace, kterou vznikne graf \\(G + v = (V \\cup \\{v\\}, E \\cup \\{\\{w, v\\}\\})\\).</li> </ul> <p>V\u011bta 3.2 (o trh\u00e1n\u00ed list\u016f)</p> D\u016fkaz V\u011bty 3.2 <p>(1) \\(G\\) je strom \\(\\implies\\) (2) \\(G \u2212 v\\) je strom:</p> <p>(1) \\(G \u2212 v\\) je souvisl\u00fd:</p> <ul> <li>Zvol dva libovoln\u011b \\(x, y \\in V \\setminus \\{v\\}\\) a cestu \\(P\\) mezi nimi v \\(G\\) (ta existuje, proto\u017ee $G je souvisl\u00fd).</li> <li>\\(P\\) nem\u016f\u017ee obsahovat jin\u00e9 vrcholy stupn\u011b 1 ne\u017e \\(x\\), \\(y\\); tedy speci\u00e1ln\u011b neobsahuje \\(v\\)</li> <li>Dost\u00e1v\u00e1me tedy \\(P \\subseteq G \u2212 v\\) a tedy \\(G \u2212 v\\) je souvisl\u00fd.</li> </ul> <p>(2) \\(G \u2212 v\\) je bez kru\u017enic:</p> <ul> <li>\\(G \u2212 v\\) je podgraf \\(G\\) a tedy neobsahuje kru\u017enici.</li> </ul> <p>Tedy \\(G \u2212 v\\) je strom</p> <p>(2) \\(G - v\\) je strom \\(\\implies\\) (1) \\(G\\) je strom:</p> <p>(1) \\(G\\) je bez kru\u017enic:</p> <ul> <li>Vr\u00e1cen\u00edm listu \\(v\\) do grafu \\(G\\) (p\u0159id\u00e1n\u00edm listu ke stromu \\(G \u2212 v\\))  zjevn\u011b nevytvo\u0159\u00edme kru\u017enici.</li> </ul> <p>(2) \\(G\\) je souvisl\u00fd:</p> <ul> <li>Mezi ka\u017ed\u00fdmi dv\u011bma \\(x, y \\in V \\setminus \\{v\\}\\) vede cesta v \\(G \u2212 v\\).</li> <li>Cesta v \\(G\\) z libovoln\u00e9ho vrcholu \\(x\\) do \\(v\\) vznikne prodlou\u017een\u00edm cesty mezi \\(x\\) a \\(w\\) do vrcholu \\(v\\), kde \\(w\\) je (jedin\u00fd) soused listu \\(v\\).</li> </ul> <p>Tedy \\(G\\) je strom</p>"},{"location":"AG1/03_Stromy/3.1_Z%C3%A1kladn%C3%AD_pojmy/#theorem-3.2","title":"V\u011bta o trh\u00e1n\u00ed list\u016f","text":"<p>Nech\u0165 \\(G = (V, E)\\) je graf na aspo\u0148 2 vrcholech a nech\u0165 \\(v \\in V\\) je jeho list. Pak jsou n\u00e1sleduj\u00edc\u00ed tvrzen\u00ed ekvivalentn\u00ed: </p> <ol> <li>\\(G\\) je strom.</li> <li>\\(G \u2212 v\\) je strom</li> </ol>"},{"location":"AG1/03_Stromy/3.2_Charakterizace_strom%C5%AF/","title":"3.2 Charakterizace strom\u016f","text":"<p>Kombinace acykli\u010dnosti a souvislosti d\u00e1v\u00e1 strom\u016fm n\u011bkolik  unik\u00e1tn\u00edch vlastnost\u00ed a to umo\u017e\u0148uje n\u011bkolik alternativn\u00edch  charakterizac\u00ed strom\u016f.</p> <p></p> <p>V\u011bta 3.3 (o charakterizaci strom\u016f)</p> D\u016fkaz (1) \\(\\implies\\) (2) <p>(1) \\(G\\) je strom \\(\\implies\\) (2) \\(\\forall\\) 2 vrcholy \\(u, v \\in V\\) \\(\\exists\\) pr\u00e1v\u011b jedna \\(u\\)-\\(v\\)-cesta.</p> <p>PS: Obr\u00e1zek se dv\u011bma rozch\u00e1zej\u00edc\u00edmi se cestami</p> <ol> <li>Strom je souvisl\u00fd, proto \\(\\forall x, y \\in V\\) \\(\\exists\\) \\(x\\)-\\(y\\)-cesta.</li> <li>Pro spor p\u0159edpokl\u00e1dejme, \u017ee existuj\u00ed dva vrcholy \\(u\\) a \\(v\\), mezi kter\u00fdmi existuj\u00ed aspo\u0148 dv\u011b r\u016fzn\u00e9 cesty  \\(P_{1} = a_{1}, ... , a_{k}\\) a \\(P_{2} = b_{1}, ... , b_{l}\\) \\((\\)tedy \\(a_{1} = b_{1} = u\\) a \\(a_{k} = b_{l} = v)\\).</li> <li>Nech\u0165 \\(i \\geq 1\\) je nejmen\u0161\u00ed index takov\u00fd, \u017ee \\(a_{i} = b_{i}\\) a \\(a_{i+1} \\neq b_{i+1}\\).</li> <li>Ozna\u010dme \\(p, q &gt; i\\) takovou dvojici index\u016f, \u017ee \\(a_{p} = b_{q}\\) a \\(\\{a_{i+1}, . . . , a_{p\u22121}\\} \\cap \\{b_{i+1}, . . . , b_{q\u22121}\\} = \\emptyset\\).</li> <li>Pak ale vrcholy \\(\\{a_{i}, a_{i+1}, . . . , a_{p\u22121}, a_{p}\\}\\) a \\(\\{b_{i+1}, . . . , b_{q\u22121}\\}\\) dohromady tvo\u0159\u00ed v \\(G\\) kru\u017enici \u2013 SPOR</li> </ol> <pre><code>graph LR\nu -- a1b1 --&gt; a2/b2 --&gt; ai/bi\nai/bi --&gt; ai+1 --&gt; a.. --&gt; ap/bq\nai/bi --&gt; bi+1 --&gt; b.. --&gt; ap/bq\nap/bq --&gt; ... --&gt; ak/bl/v</code></pre> D\u016fkaz (2) \\(\\implies\\) (1) <p>(2) \\(\\forall 2\\) vrcholy \\(u, v \\in V \\exists\\) pr\u00e1v\u011b jedna \\(u\\)-\\(v\\)-cesta \\(\\implies\\) (1) \\(G\\) je strom.</p> <ol> <li>Z p\u0159edpokladu vypl\u00fdv\u00e1, \u017ee \\(G\\) je souvisl\u00fd.</li> <li>Pokud by v \\(G\\) byla kru\u017enice, tak by mezi n\u011bjak\u00fdmi dv\u011bma jej\u00edmi vrcholy existovaly alespo\u0148 dv\u011b r\u016fzn\u00e9 cesty, co\u017e je SPOR s p\u0159edpokladem.</li> <li>\\(G\\) je tedy strom.</li> </ol> D\u016fkaz (1) \\(\\implies\\) (3) <p>(1) \\(G\\) je strom \\(\\implies\\) (3) \\(G\\) je souvisl\u00fd a vynech\u00e1n\u00edm libovoln\u00e9 hrany vznikne nesouvisl\u00fd graf.</p> <ol> <li>Souvislost \\(G\\) je spln\u011bna trivi\u00e1ln\u011b.</li> <li>P\u0159edpokl\u00e1dejme pro spor, \u017ee existuje hrana \\(e = \\{u, v\\} \\in E\\) takov\u00e1, \u017ee graf \\(G \u2212 e = (V, E \\setminus \\{e\\})\\) je souvisl\u00fd.</li> <li>Pak v \\(G \u2212 e\\) mus\u00ed existovat \\(u\\)-\\(v\\)-cesta, kter\u00e1 se ale po p\u0159id\u00e1n\u00ed hrany \\(e\\) stane v grafu \\(G\\) kru\u017enic\u00ed, co\u017e je SPOR s p\u0159edpokladem, \u017ee \\(G\\) je strom.</li> </ol> D\u016fkaz (3) \\(\\implies\\) (1) <p>(3) \\(G\\) je souvisl\u00fd a vynech\u00e1n\u00edm libovoln\u00e9 hrany vznikne nesouvisl\u00fd graf \\(\\implies\\) (1) \\(G\\) je strom</p> <ol> <li>Souvislost \\(G\\) je spln\u011bna, sta\u010d\u00ed uk\u00e1zat neexistenci kru\u017enic v \\(G\\).</li> <li>P\u0159edpokl\u00e1dejme pro spor, \u017ee:<ul> <li>(1) vynech\u00e1n\u00edm lib. hrany v \\(G\\) vznikne nesouvisl\u00fd graf</li> <li>(2) \\(G\\) obsahuje kru\u017enici \\(C\\).</li> </ul> </li> <li>Vyjmeme-li z \\(G\\) ale libovolnou hranu \\(e = \\{x, y\\} \\in C\\), pak se \\(G\\) nerozpadne na dv\u011b komponenty,  proto\u017ee jak\u00e9koliv cest\u011b mezi libovoln\u00fdmi 2 vrcholy \\(u\\) a \\(v\\), kter\u00e1 p\u0159ed t\u00edm obsahovala \\(e\\), poskytne \\(C\\) alternativn\u00ed spojen\u00ed.</li> <li>Pro hrany kru\u017enice \\(C\\) tud\u00ed\u017e p\u0159edpoklad (1) neplat\u00ed \u2013 dostali jsme SPOR.</li> </ol> D\u016fkaz (1) \\(\\implies\\) (4) <p>(1) \\(G\\) je strom \\(\\implies\\) (4) \\(G\\) je souvisl\u00fd a \\(|V| = |E| + 1\\)</p> <p>V\u011bta o trh\u00e1n\u00ed list\u016f</p> <ol> <li>Souvislost \\(G\\) je spln\u011bna trivi\u00e1ln\u011b.</li> <li>Pro d\u016fkaz \\(|V| = |E| + 1\\) pou\u017eijeme indukci podle \\(|V|\\).</li> <li>Pro \\(|V| = 1\\) tvrzen\u00ed plat\u00ed trivi\u00e1ln\u011b. P\u0159edpokl\u00e1dejme \\(|V| \\gt 1\\).</li> <li>Dle V\u011bty o existenci list\u016f existuje v stromu \\(G\\) list \\(v\\).</li> <li>Graf \\(G' = G \u2212 v\\) je dle V\u011bty o trh\u00e1n\u00ed list\u016f op\u011bt strom.</li> <li>Dle induk\u010dn\u00edho p\u0159edpokladu tedy plat\u00ed \\(|V(G')| = |E(G')| + 1\\).</li> <li>Vr\u00e1t\u00edme-li list \\(v\\) do grafu \\(G\\), zv\u00fd\u0161\u00edme po\u010det vrchol\u016f i po\u010det hran o jedna. Proto  \\(|V | = |V (G')| + 1 = (|E(G')| + 1) + 1 = |E| + 1\\).</li> </ol> D\u016fkaz (4) \\(\\implies\\) (1) <p>V\u011bta o trh\u00e1n\u00ed list\u016f</p> <p>(4) \\(G\\) je souvisl\u00fd a \\(|V| = |E| + 1\\) \\(\\implies\\) (1) \\(G\\) je strom</p> <ol> <li>Indukc\u00ed podle \\(|V|\\). Pro \\(|V| = 1\\) tvrzen\u00ed trivi\u00e1ln\u011b plat\u00ed.</li> <li>Uk\u00e1\u017eeme nejd\u0159\u00edve, \u017ee z p\u0159edpokladu plyne, \u017ee v \\(G\\) existuje list.<ul> <li>Dle p\u0159edpokladu plat\u00ed \\(\\sum_{u \\in V}deg_{G}(u) = 2|E| = 2|V| - 2\\)</li> <li>Kdyby v\u0161echny stupn\u011b v \\(G\\) byly aspo\u0148 2,  pak \\(\\sum_{u \\in V}deg_{G}(u) \\geq 2|V|\\)</li> <li>Tedy n\u011bjak\u00fd vrchol mus\u00ed m\u00edt stupe\u0148 nejv\u00fd\u0161e 1. Ozna\u010dme ho \\(v\\).</li> <li>Proto\u017ee \\(G\\) je souvisl\u00fd, vrchol \\(v\\) nem\u016f\u017ee m\u00edt stupe\u0148 0.</li> <li>Vrchol \\(v\\) je tedy list.</li> </ul> </li> <li>Graf \\(G' = G \u2212 v\\) je souvisl\u00fd a spl\u0148uje \\(|V (G')| = |E(G')| + 1\\), nebo\u0165 jsme z \\(G\\) odebrali 1 vrchol a 1 hranu.</li> <li>\\(G'\\) je tedy dle induk\u010dn\u00edho p\u0159edpokladu strom.</li> <li>Dle V\u011bty o trh\u00e1n\u00ed list\u016f je tedy \\(G\\) tak\u00e9 strom</li> </ol>"},{"location":"AG1/03_Stromy/3.2_Charakterizace_strom%C5%AF/#theorem-3.3","title":"V\u011bta o charakterizaci strom\u016f","text":"<p>Nech\u0165 \\(G = (V, E)\\) je graf. Pak n\u00e1sleduj\u00edc\u00ed tvrzen\u00ed jsou ekvivalentn\u00ed:</p> <ol> <li>\\(G\\) je strom.</li> <li>Pro ka\u017ed\u00e9 dva vrcholy \\(u, v \\in V\\) existuje pr\u00e1v\u011b jedna \\(u\\)-\\(v\\)-cesta.</li> <li>\\(G\\) je souvisl\u00fd a vynech\u00e1n\u00edm libovoln\u00e9 hrany vznikne nesouvisl\u00fd graf.</li> <li>\\(G\\) je souvisl\u00fd a \\(|E| = |V| \u2212 1\\)</li> </ol>"},{"location":"AG1/03_Stromy/3.3_Kostra_grafu/","title":"3.3 Kostra grafu","text":""},{"location":"AG1/03_Stromy/3.3_Kostra_grafu/#motivace","title":"Motivace","text":"<ul> <li>Uva\u017eujme topologii po\u010d\u00edta\u010dov\u00e9 s\u00edt\u011b popsanou jako souvisl\u00fd graf, jeho\u017e hrany p\u0159edstavuj\u00ed komunika\u010dn\u00ed kabely mezi sm\u011brova\u010di.</li> <li>Ke ka\u017ed\u00e9mu sm\u011brova\u010di mohou b\u00fdt p\u0159ipojeny koncov\u00e9 po\u010d\u00edta\u010de.</li> <li>Chceme minimalizovat po\u010det komunika\u010dn\u00edch kabel\u016f tak, aby po\u010d\u00edta\u010dov\u00e1 s\u00ed\u0165 z\u016fstala funk\u010dn\u00ed, tedy aby libovoln\u00fd po\u010d\u00edta\u010d mohl  komunikovat s libovoln\u00fdm jin\u00fdm po\u010d\u00edta\u010dem d\u00edky tomu, \u017ee lze postavit mezi nimi komunika\u010dn\u00ed propojen\u00ed slo\u017een\u00e9 z 1 \u010di v\u00edce sm\u011brova\u010d\u016f.</li> <li>Probl\u00e9m, kter\u00e9 konkr\u00e9tn\u00ed kabely zvolit pro toto minim\u00e1ln\u00ed \u0159e\u0161en\u00ed, je probl\u00e9m konstrukce kostry grafu (angl. spanning tree) s\u00edt\u011b.</li> <li>Pokud nav\u00edc po\u017eadujeme, aby byl minim\u00e1ln\u00ed sou\u010det d\u00e9lek pou\u017eit\u00fdch kabel\u016f, dostaneme probl\u00e9m minim\u00e1ln\u00ed kostry.</li> </ul> <p>Definice 3.4 (Kostra grafu)</p> <p>Pozorov\u00e1n\u00ed</p> <ul> <li>Nesouvisl\u00e9 grafy nemaj\u00ed kostru, kostru m\u00e1 ka\u017ed\u00e1 souvisl\u00e1 komponenta.</li> <li>Kostra souvisl\u00e9ho grafu je tedy souvisl\u00fd podgraf nad stejnou mno\u017einou vrchol\u016f s nejmen\u0161\u00edm po\u010dtem hran.</li> <li>Souvisl\u00fd graf s kru\u017enicemi m\u00e1 v\u00edce r\u016fzn\u00fdch koster</li> </ul>"},{"location":"AG1/03_Stromy/3.3_Kostra_grafu/#def-3.4","title":"Kostra grafu","text":"<p>Nech\u0165 \\(G = (V, E)\\) je souvisl\u00fd graf. Podgraf \\(K\\) grafu \\(G\\) nazveme kostrou grafu \\(G\\), pokud \\(V(K) = V\\) a \\(K\\) je strom.</p>"},{"location":"AG1/03_Stromy/3.3_Kostra_grafu/#jak-najit-kostru-souvisleho-grafu","title":"Jak naj\u00edt kostru souvisl\u00e9ho grafu?","text":"<ul> <li>Tato \u00faloha se m\u016f\u017ee \u0159e\u0161it stejn\u011b efektivn\u011b jak prohled\u00e1v\u00e1n\u00edm grafu do hloubky tak prohled\u00e1v\u00e1n\u00edm do \u0161\u00ed\u0159ky.</li> <li>Uk\u00e1\u017eeme si jednoduchou modifikaci algoritmu BFS.</li> <li>P\u0159edpokl\u00e1dejme, \u017ee m\u00e1me ov\u011b\u0159eno, \u017ee vstupn\u00ed graf je souvisl\u00fd (minul\u00e1 p\u0159edn\u00e1\u0161ka).</li> </ul> <p>Vstup: Souvisl\u00fd graf \\(G\\) V\u00fdstup: Seznam hran n\u011bjak\u00e9 kostry grafu \\(G\\)</p>"},{"location":"AG1/03_Stromy/3.3_Kostra_grafu/#jak-je-treba-bfs-modifikovat","title":"Jak je t\u0159eba BFS modifikovat?","text":"<p>Pro odpov\u011b\u010f si sta\u010d\u00ed p\u0159ipomenout hladiny v BFS</p> <pre><code>graph TD\n    v0(H0):::level0\n    v0 --&gt; v1(H1):::level1\n    v0 --&gt; v2(H1):::level1\n    v0 --&gt; v7(H1):::level1\n    v1 --&gt; v4(H2):::level2\n    v1 --&gt; v3(H2):::level2\n    v2 --&gt; v5(H2):::level2\n    v7 --&gt; v6(H2):::level2\n    v3 --&gt; v8(H3):::level3\n    v1 --- v2\n\n    classDef level0 fill:#00af00,stroke:#000,stroke-width:2px,color:#fff,shape:circle,align:center;\n    classDef level1 fill:#0000af,stroke:#000,stroke-width:2px,color:#fff,shape:circle,align:center;\n    classDef level2 fill:#afaf00,stroke:#000,stroke-width:2px,color:#fff,shape:circle,align:center;\n    classDef level3 fill:#ff6666,stroke:#000,stroke-width:2px,color:#fff,shape:circle,align:center;</code></pre> <p>Pozorov\u00e1n\u00ed</p> <p>Hrany do p\u0159edch\u016fdc\u016f tvo\u0159\u00ed kostru.</p> <p></p> <p>V\u011bta 3.4 (o spr\u00e1vnosti algoritmu BFS_kostra)</p> D\u016fkaz V\u011bty 3.4 <ol> <li>Ozna\u010dme \\(H\\) graf na mno\u017ein\u011b vrchol\u016f \\(V\\) s hranami do p\u0159edch\u016fdc\u016f (podle pole vypln\u011bn\u00e9ho algoritmem BFS).</li> <li>V\u00edme, \u017ee ka\u017ed\u00fd vrchol krom\u011b po\u010d\u00e1te\u010dn\u00edho vrcholu m\u00e1 pr\u00e1v\u011b jednoho p\u0159edch\u016fdce. Tedy \\(H\\) m\u00e1 pr\u00e1v\u011b \\(n \u2212 1\\) hran.</li> <li>Proto\u017ee po hran\u00e1ch do p\u0159edch\u016fdc\u016f je mo\u017en\u00e9 se z ka\u017ed\u00e9ho vrcholu dostat do \\(s\\) (tedy pro ka\u017ed\u00fd vrchol v existuje v \\(H\\) sled z \\(v\\) do \\(s\\)) a proto\u017ee slo\u017een\u00edm sled\u016f vznikne sled, je graf \\(H\\) souvisl\u00fd.</li> </ol>"},{"location":"AG1/03_Stromy/3.3_Kostra_grafu/#theorem-3.4","title":"V\u011bta o spr\u00e1vnosti algoritmu BFS_kostra","text":"<p>Nech\u0165 \\(G = (V, E)\\) je souvisl\u00fd graf.  Potom hrany do p\u0159edch\u016fdc\u016f v BFS tvo\u0159\u00ed n\u011bjakou kostru grafu \\(G\\)</p>"},{"location":"AG1/03_Stromy/3.4_Topsort/","title":"3.4 Topsort","text":"<p>Definice 3.5 (Topologick\u00e9 uspo\u0159\u00e1d\u00e1n\u00ed)</p> <ul> <li>Jin\u00fdmi slovy, pokud vrcholy zakresl\u00edme horizont\u00e1ln\u011b v po\u0159ad\u00ed topologick\u00e9ho uspo\u0159\u00e1d\u00e1n\u00ed, budou v\u0161echny orientovan\u00e9 hrany sm\u011b\u0159ovat zleva doprava.</li> <li>Topologick\u00e9 uspo\u0159\u00e1d\u00e1n\u00ed se pou\u017e\u00edv\u00e1 p\u0159edev\u0161\u00edm pro pl\u00e1nov\u00e1n\u00ed po\u0159ad\u00ed proveden\u00ed navz\u00e1jem z\u00e1visl\u00fdch \u00faloh/v\u00fdpo\u010dt\u016f.</li> </ul>"},{"location":"AG1/03_Stromy/3.4_Topsort/#def-3.5","title":"Topologick\u00e9 uspo\u0159\u00e1d\u00e1n\u00ed","text":"<p>Topologick\u00e9 uspo\u0159\u00e1d\u00e1n\u00ed (TU) orientovan\u00e9ho grafu \\(G = (V, E)\\)  je takov\u00e9 se\u0159azen\u00ed vrchol\u016f \\(V = \\{v_{1}, ... , v_{n}\\}\\), \u017ee pro ka\u017edou orientovanou hranu \\((v_{i}, v_{j} ) \\in E\\) plat\u00ed \\(i \\lt j\\).</p>"},{"location":"AG1/03_Stromy/3.4_Topsort/#cyklicke-zavislosti","title":"Cyklick\u00e9 z\u00e1vislosti","text":"<p>Z\u00edskan\u00fd orientovan\u00fd graf v\u0161ak m\u016f\u017ee obsahovat cyklus (orientovanou kru\u017enici)</p> <p>Pozorov\u00e1n\u00ed</p> <ul> <li>Pokud graf obsahuje cyklus, nelze tuto \u00falohu zjevn\u011b vy\u0159e\u0161it.</li> <li>Graf \\(G\\) m\u016f\u017ee m\u00edt v\u00edce topologick\u00fdch uspo\u0159\u00e1d\u00e1n\u00ed</li> </ul> <p></p> <p>Definice 3.6 (Orientovan\u00e1 kru\u017enice)</p> <p></p> <p>Definice 3.7 (Acyklick\u00fd graf)</p> <p></p> <p>Definice 3.8 (Zdroj a stok)</p> <p></p> <p>V\u011bta 3.5 (o existenci zdroje a stoku)</p> D\u016fkaz V\u011bty 3.5 <ol> <li>Sporem pro existenci zdroje (pro stok analogick\u00e9).</li> <li>P\u0159edpokl\u00e1dejme, \u017ee v \\(G\\) neexistuje zdroj.</li> <li>Zvolme libovoln\u00fd vrchol \\(v_{1} \\in V\\) . Do n\u011bj, dle p\u0159edchoz\u00edho p\u0159edpokladu, vede alespo\u0148 jedna orientovan\u00e1 hrana z n\u011bjak\u00e9ho vrcholu \\(v_{2}\\).</li> <li>Do \\(v_{2}\\) tak\u00e9 mus\u00ed v\u00e9st orientovan\u00e1 hrana z n\u011bjak\u00e9ho vrcholu \\(v_{3}\\), a tak d\u00e1le.</li> <li>Nejpozd\u011bji po \\(n\\) kroc\u00edch se v\u0161ak mus\u00ed n\u011bjak\u00fd vrchol zopakovat.</li> <li>To ale znamen\u00e1 existenci cyklu v \\(G\\), \u010d\u00edm\u017e dost\u00e1v\u00e1me SPOR.</li> </ol> <p></p> <p>Algoritmus 3.1 (Topsort)</p> <p></p> <p>V\u011bta 3.6 (o spr\u00e1vnosti algoritmu TopSort)</p> D\u016fkaz V\u011bty 3.6 <ol> <li>P\u0159edpokl\u00e1dejme, \u017ee \\(G\\) je orientovan\u00fd graf a p\u0159edpokl\u00e1dejme, \u017ee na po\u010d\u00e1tku v kroku \\((5)\\) existuje aspo\u0148 jeden zdroj \\(z\\) a \u017ee v\u0161echny zdroje za\u0159ad\u00edme do fronty \\(Q\\).</li> <li>Vnit\u0159ek cyklu \\((7)-(11)\\) realizuje odebr\u00e1n\u00ed \\(1\\) zdroje z fronty \\(Q\\), jeho vyjmut\u00ed z grafu \\(G\\),  jeho vlo\u017een\u00ed do v\u00fdsledn\u00e9ho uspo\u0159\u00e1d\u00e1n\u00ed a identifikaci p\u0159\u00edpadn\u00fdch nov\u00fdch zdroj\u016f a jejich za\u0159azen\u00ed do \\(Q\\).</li> <li>Existence hrany \\((v_{i}, v_{j})\\) znemo\u017e\u0148uje vlo\u017eit vrchol \\(v_{j}\\) do fronty \\(Q\\)  p\u0159ed vrcholem \\(v_{i}\\), proto\u017ee \\(v_{j}\\) by v takov\u00e9m okam\u017eiku m\u011blo  \\(\\delta [v_{j}] \\geq 1\\) a podm\u00ednkou vlo\u017een\u00ed do \\(Q\\) je \\(\\delta [v_{j}] = 0\\)</li> <li>Pokud v okam\u017eiku vypr\u00e1zdn\u011bn\u00ed fronty jsou zpracov\u00e1ny v\u0161echny vrcholy grafu \\(G\\), na\u0161li jsme TU orientovan\u00e9ho acyklick\u00e9ho grafu (RETURN).</li> <li>Pokud je fronta pr\u00e1zdn\u00e1 a p\u0159esto zb\u00fdvaj\u00ed n\u011bjak\u00e9 nezpracovan\u00e9 vrcholy ve zbytku \\(G\\), pak ve zbytku \\(G\\) nejsou \u017e\u00e1dn\u00e9 zdroje,  \u010dili ka\u017ed\u00fd vrchol m\u00e1 vstupn\u00ed hranu/-y a mus\u00ed existovat orientovan\u00fd cyklus, plus p\u0159\u00edpadn\u011b z n\u011bj dostupn\u00e9 podgrafy.  Vrcholy tohoto zbytkov\u00e9ho grafu nelze topologicky uspo\u0159\u00e1dat.</li> <li>Algoritmus tedy spr\u00e1vn\u011b detekuje existenci cyklu a skon\u010d\u00ed v kone\u010dn\u00e9m \u010dase.</li> <li>V obou p\u0159\u00edpadech algoritmus pracuje korektn\u011b a zastav\u00ed se.</li> </ol> <p></p> <p>V\u011bta 3.7 (o slo\u017eitosti algoritmu TopSort)</p> D\u016fkaz V\u011bty 3.7 <ol> <li>V\u00fdpo\u010det pole vstupn\u00edch stup\u0148\u016f na \u0159\u00e1dc\u00edch \\((3),(4)\\) trv\u00e1 \\(\\Theta (|E|)\\).</li> <li>Po\u010d\u00e1te\u010dn\u00ed vlo\u017een\u00ed zdroj\u016f do \\(Q\\) na \u0159\u00e1dku \\((5)\\) trv\u00e1 \\(O(|V|)\\).</li> <li>Ka\u017ed\u00fd vrchol je vlo\u017een do \\(Q\\) nejv\u00fd\u0161e 1x, proto vyb\u00edr\u00e1n\u00ed z \\(Q\\) a v\u00fdpis na v\u00fdstup na \u0159\u00e1dc\u00edch \\((6)\\)\u2013\\((8)\\) trv\u00e1 \\(O(|V|)\\).</li> <li>Ka\u017ed\u00e1 hrana m\u016f\u017ee b\u00fdt odebr\u00e1na z grafu nejv\u00fd\u0161e 1x, proto operace na \u0159\u00e1dc\u00edch \\((9)\\)\u2013\\((11)\\) trvaj\u00ed \\(O(|E|)\\).</li> <li>Celkov\u00e1 \u010dasov\u00e1 slo\u017eitost je tedy \\(O(|V|+|E|)\\).</li> <li>Graf \\(G\\), pole \\(\\delta\\)[], fronta \\(Q\\), to v\u0161e zabere \\(O(|V| + |E|)\\) pam\u011bti.</li> </ol> K zamy\u0161len\u00ed <ul> <li>Jak vypadaj\u00ed orientovan\u00e9 grafy s pr\u00e1v\u011b dv\u011bma topologick\u00fdmi uspo\u0159\u00e1d\u00e1n\u00edmi?</li> <li>Jak vypadaj\u00ed orientovan\u00e9 grafy s pr\u00e1v\u011b t\u0159emi topologick\u00fdmi uspo\u0159\u00e1d\u00e1n\u00edmi?</li> <li>Fungoval by algoritmus TopSort i s jinou strukturou ne\u017e frontou?</li> <li>Co t\u0159eba se z\u00e1sobn\u00edkem?</li> <li>Navrhn\u011bte, jak modifikovat algoritmus DFS pro orientovan\u00e9</li> <li>grafy, aby vytvo\u0159il TU grafu.<ul> <li>N\u00e1pov\u011bda 1: Vezmu-li orientovan\u00fd acyklick\u00fd graf a n\u011bjak\u00e9 jeho TU, jakou vlastnost mus\u00ed m\u00edt posledn\u00ed vrchol v TU?</li> <li>N\u00e1pov\u011bda 2: P\u0159ipus\u0165me, \u017ee TU lze konstruovat odzadu.</li> </ul> </li> </ul>"},{"location":"AG1/03_Stromy/3.4_Topsort/#def-3.6","title":"Orientovan\u00e1 kru\u017enice","text":"<p>Nech\u0165 \\(n \\geq 1\\). Orientovan\u00e1 kru\u017enice d\u00e9lky \\(n\\) (s \\(n\\) vrcholy) je orient. graf \\((\\{1, ... , n\\}\\), \\(\\{(i, i + 1) | i \\in \\{1, ... , n \u2212 1\\}\\} \\cup \\{(n, 1)\\})\\).</p>"},{"location":"AG1/03_Stromy/3.4_Topsort/#def-3.7","title":"Acyklick\u00fd graf","text":"<p>Orientovan\u00fd graf \\(G\\) nazveme acyklick\u00fd, pokud neobsahuje jako podgraf orientovanou kru\u017enici.  angl. Directed Acyclic Graph (DAG)</p>"},{"location":"AG1/03_Stromy/3.4_Topsort/#def-3.8","title":"Zdroj a stok","text":"<ul> <li>Zdroj je takov\u00fd vrchol orientovan\u00e9ho grafu, do kter\u00e9ho nevede \u017e\u00e1dn\u00e1 hrana.</li> <li>Stok je takov\u00fd vrchol orientovan\u00e9ho grafu, ze kter\u00e9ho nevede \u017e\u00e1dn\u00e1 hrana</li> </ul>"},{"location":"AG1/03_Stromy/3.4_Topsort/#theorem-3.5","title":"V\u011bta o existenci zdroje a stoku","text":"<ul> <li>Nech\u0165 \\(G = (V, E)\\) je orientovan\u00fd acyklick\u00fd graf. Potom \\(G\\) obsahuje aspo\u0148 jeden zdroj a aspo\u0148 jeden stok.</li> </ul>"},{"location":"AG1/03_Stromy/3.4_Topsort/#algo-3.1","title":"Algoritmus Topsort","text":"<p>Existence zdroje v orientovan\u00e9m acyklick\u00e9m grafu vede p\u0159\u00edmo\u010da\u0159e na algoritmus konstrukce topologick\u00e9ho uspo\u0159\u00e1d\u00e1n\u00ed takov\u00e9ho grafu.</p> <p>Vstup</p> <p>Orientovan\u00fd graf \\(G\\).</p> <p>V\u00fdstup</p> <p>N\u011bjak\u00e9 topologick\u00e9 uspo\u0159\u00e1d\u00e1n\u00ed \\(G\\), pokud byl acyklick\u00fd  Detekce cykli\u010dnosti v opa\u010dn\u00e9m p\u0159\u00edpad\u011b.</p> <p>Idea</p> <ul> <li>po\u010d\u00edtej vstupn\u00ed stupn\u011b vrchol\u016f (tj. po\u010det hran, ve kter\u00fdch je vrchol n\u00e1sledn\u00edkem),</li> <li>zdroje za\u0159azuj do fronty,</li> <li>odeb\u00edrej vrcholy z fronty, za\u0159azuj je do v\u00fdstupn\u00edho po\u0159ad\u00ed a odeb\u00edrej je z grafu a to znamen\u00e1, \u017ee jejich n\u00e1sledn\u00edk\u016fm sni\u017euj vstupn\u00ed stupn\u011b.</li> <li>Pokud po vypr\u00e1zdn\u011bn\u00ed fronty zbyly v grafu n\u011bjak\u00e9 vrcholy, byl v n\u011bm orientovan\u00fd cyklus.</li> </ul> <p>Algoritmus</p> Algoritmus TopSort(orientovan\u00fd G):<pre><code>Q je pr\u00e1zdn\u00e1 fronta\n\u03b4[] = pole vstupn\u00edch stup\u0148\u016f vrchol\u016f G, na po\u010d\u00e1tku vynulovan\u00e9\nPro ka\u017edou hranu (u, v) \u2208 E(G):\n    \u03b4[v]++\nVlo\u017e do Q v\u0161echny vrcholy z s \u03b4[z] = 0\nDokud fronta Q nen\u00ed pr\u00e1zdn\u00e1:\n    Odeber prvek z ze za\u010d\u00e1tku fronty Q\n    Vypi\u0161 z\n    Pro ka\u017edou hranu (z, w) vedouc\u00ed ze z:\n        \u03b4[w]\u2212\u2212\n        Pokud \u03b4[w] = 0: za\u0159a\u010f w do Q\nPokud nebyly zpracov\u00e1ny v\u0161echny vrcholy:\n    graf G obsahuje orientovan\u00fd cyklus\n</code></pre>"},{"location":"AG1/03_Stromy/3.4_Topsort/#theorem-3.6","title":"V\u011bta o spr\u00e1vnosti algoritmu TopSort","text":"<p>Algoritmus TopSort(\\(G\\)) spu\u0161t\u011bn\u00fd na orientovan\u00fd graf \\(G\\) dob\u011bhne v kone\u010dn\u00e9m \u010dase a bu\u010f vygeneruje korektn\u00ed topologick\u00e9 uspo\u0159\u00e1d\u00e1n\u00ed acyklick\u00e9ho grafu nebo detekuje existenci orientovan\u00e9ho cyklu.</p>"},{"location":"AG1/03_Stromy/3.4_Topsort/#theorem-3.7","title":"V\u011bta o slo\u017eitosti algoritmu TopSort","text":"<p>Algoritmus TopSort(\\(G\\)), kde \\(G = (V, E)\\) je orientovan\u00fd graf reprezentovan\u00fd pomoc\u00ed pole n\u00e1sledn\u00edk\u016f, m\u00e1 \u010dasovou i pam\u011b\u0165ovou slo\u017eitost \\(O(|V| + |E|)\\).</p>"},{"location":"AG1/03_Stromy/3.5_Jednoduch%C3%A9_%C5%99azen%C3%AD/","title":"3.5 Jednoduch\u00e9 \u0159azen\u00ed","text":"<p>Definice 3.9 (Probl\u00e9m \u0159azen\u00ed)</p> <ul> <li>P\u0159\u00edklad: \\(n = 6, A = 23, 7, 19, 21, 5, 12, A^{\u2032} = 5, 7, 12, 19, 21, 23\\).</li> <li>Obecn\u011b: ze vstupn\u00ed posloupnosti vytvo\u0159it posloupnost hodnot v p\u0159eddefinovan\u00e9m po\u0159ad\u00ed.</li> <li>Fundament\u00e1ln\u00ed probl\u00e9m v informatice.</li> <li>Existuje \u0159ada p\u0159\u00edstup\u016f a algoritm\u016f.</li> <li>Implicitn\u011b budeme uva\u017eovat algoritmy \u0159adic\u00ed vzestupn\u011b.</li> </ul>"},{"location":"AG1/03_Stromy/3.5_Jednoduch%C3%A9_%C5%99azen%C3%AD/#def-3.9","title":"Probl\u00e9m \u0159azen\u00ed","text":"<ul> <li>Vstup: \u010c\u00edslo \\(n\\) a posloupnost \u010d\u00edsel \\(A = a_{1}, a_{2}, . . . , a_{n}\\).</li> <li>V\u00fdstup: Takov\u00e1 permutace \\(A^{\u2032} = a_{1}^{\u2032}, a_{2}^{\u2032}, . . . , a_{n}^{\u2032}\\) vstupn\u00ed posloupnosti A,  \u017ee plat\u00ed \\(a_{1}^{\u2032} \\leq a_{2}^{\u2032} \\leq ... \\leq a_{n}^{\u2032}\\)</li> </ul>"},{"location":"AG1/03_Stromy/3.5_Jednoduch%C3%A9_%C5%99azen%C3%AD/#taxonomie-algoritmu-pro-razeni","title":"Taxonomie algoritm\u016f pro \u0159azen\u00ed","text":"<p>(A) Z\u00e1kladn\u00ed operace:</p> <ol> <li>\u0158azen\u00ed zalo\u017een\u00e9 na pouze bin\u00e1rn\u00ed operaci porovn\u00e1n\u00ed-a-prohozen\u00ed (Compare-And-Exchange).</li> <li>\u0158azen\u00ed zalo\u017een\u00e9 na jin\u00e9 operaci.</li> </ol> <p>(B) Pam\u011b\u0165ov\u00e1 n\u00e1ro\u010dnost:</p> <ol> <li>In-place algoritmy (pot\u0159ebuj\u00ed \\(n\\) + polylog(\\(n\\)) pam\u011bti).</li> <li>Out-of-place algoritmy.</li> </ol> <p>(C) Stabilita:</p> <ol> <li>Stabiln\u00ed algoritmy (stejn\u011b velk\u00e9 prvky se nikdy neprohod\u00ed).</li> <li>Nestabiln\u00ed algoritmy (stejn\u011b velk\u00e9 prvky se mohou prohodit).</li> </ol> <p>(D) Citlivost na hodnoty prvk\u016f vstupn\u00ed posloupnosti:</p> <ol> <li>Datov\u011b citliv\u00e9 algoritmy (\u010dasov\u00e1 slo\u017eitost z\u00e1vis\u00ed na hodnot\u00e1ch prvk\u016f).</li> <li>Datov\u011b necitliv\u00e9 algoritmy (\u010dasov\u00e1 slo\u017eitost nez\u00e1vis\u00ed na hodnot\u00e1ch prvk\u016f).</li> </ol>"},{"location":"AG1/03_Stromy/3.5_Jednoduch%C3%A9_%C5%99azen%C3%AD/#kvadraticke-algoritmy-razeni","title":"Kvadratick\u00e9 algoritmy \u0159azen\u00ed","text":"<ul> <li>Vstupn\u00ed posloupnost se rozd\u011bl\u00ed na levou se\u0159azenou a pravou nese\u0159azeno \u010d\u00e1st.</li> <li>Na po\u010d\u00e1tku je lev\u00e1 \u010d\u00e1st pr\u00e1zdn\u00e1 a prav\u00e1 \u010d\u00e1st je cel\u00e1 vstupn\u00ed posloupnost.</li> <li>Po vlo\u017een\u00ed prvku se hranice mezi se\u0159azenou a nese\u0159azenou \u010d\u00e1st\u00ed posune o jednu pozici doprava.</li> </ul> <p>Algoritmus 3.2 (SelectSort)</p> <p></p> <p>Algoritmus 3.3 (InsertSort)</p> <p></p> <p>Algoritmus 3.4 (BubbleSort)</p> <p></p> <p>V\u011bta 3.8 (o korektnosti algoritmu BubbleSort)</p> D\u016fkaz V\u011bty 3.8 <ol> <li>Korektnost dok\u00e1\u017eeme induk\u010dn\u00edm d\u016fkazem n\u00e1sleduj\u00edc\u00edho invariantu.</li> <li>Invariant: nejpozd\u011bji po \\(i\\)-t\u00e9 iteraci cyklu na \u0159\u00e1dc\u00edch \\((3)\\)\u2013\\((9)\\) se \\(i\\) nejv\u011bt\u0161\u00edch prvk\u016f pole nach\u00e1z\u00ed se\u0159azeno na \\(i\\) posledn\u00edch pozic\u00edch zprava.</li> <li>IZ: Invariant plat\u00ed pro \\(i = 1\\). Po 1. iteraci je nejv\u011bt\u0161\u00ed prvek cel\u00e9 posloupnosti zaru\u010den\u011b na posledn\u00ed pozici.</li> <li>IK: P\u0159edpokl\u00e1dejme, \u017ee Invariant plat\u00ed pro v\u0161echna \\(j \\lt i\\) a tedy \\(i \u2212 1\\) nejv\u011bt\u0161\u00edch prvk\u016f se nach\u00e1z\u00ed se\u0159azeno na posledn\u00edch \\(i \u2212 1\\) pozic\u00edch vpravo. Prove\u010fme \\(i\\)-tou iteraci.</li> <li>T\u00edm probubl\u00e1 nejv\u011bt\u0161\u00ed hodnota lev\u00e9ho zbytku doprava, lev\u00e1 \u010d\u00e1st se zkr\u00e1t\u00ed o jedna a prav\u00e1 se\u0159azen\u00e1 \u010d\u00e1st se zv\u011bt\u0161\u00ed o jeden prvek, a invariant plat\u00ed.</li> </ol> <p></p> <p>V\u011bta 3.9 (o slo\u017eitosti algoritmu BubbleSort)</p> D\u016fkaz V\u011bty 3.9 <ol> <li>Iterac\u00ed je nejv\u00fd\u0161e \\(n \u2212 1\\), \\(i\\)-t\u00e1 iterace trv\u00e1 \\(\\Theta (n \u2212 i)\\) krok\u016f, co\u017e d\u00e1v\u00e1 \u010dasovou slo\u017eitost \\(O(n^{2})\\).</li> <li>Krom\u011b vstupn\u00edho pole pot\u0159ebuje pouze \\(O(1)\\) pam\u011bti.</li> <li>Je stabiln\u00ed, nebo\u0165 podm\u00ednka na \u0159\u00e1dku \\((6)\\) zabr\u00e1n\u00ed prohozen\u00ed stejn\u00fdch prvk\u016f.</li> <li>Je datov\u011b citliv\u00fd, nebo\u0165 kon\u010d\u00ed, jakmile nedo\u0161lo b\u011bhem n\u011bkter\u00e9 iterace ke zm\u011bn\u011b. V nejlep\u0161\u00edm p\u0159\u00edpad\u011b ji\u017e se\u0159azen\u00e9ho pole m\u00e1 slo\u017eitost \\(\\Theta(n)\\).</li> </ol>"},{"location":"AG1/03_Stromy/3.5_Jednoduch%C3%A9_%C5%99azen%C3%AD/#algo-3.2","title":"Algoritmus SelectSort","text":"<p>Z nese\u0159azen\u00e9 prav\u00e9 \u010d\u00e1sti se vybere minimum a prohod\u00ed se s jej\u00edm prvn\u00edm prvkem, tj. p\u0159\u00edmo za se\u0159azenou \u010d\u00e1st. </p> <p>Vlastnosti</p> <ul> <li>Se\u0159ad\u00ed \\(n\\)-prvkov\u00e9 pole v \u010dase \\(\u0398(n^{2})\\)</li> <li>in-place, nestabiln\u00ed, datov\u011b necitliv\u00fd</li> </ul> <p>Invariant: Po \\(i\\)-t\u00e9 iteraci je vlevo se\u0159azen\u00e1 posloupnost d\u00e9lky \\(i\\) a vpravo zb\u00fdv\u00e1 \\(n \u2212 i\\) nese\u0159azen\u00fdch prvk\u016f, kter\u00e9 jsou \\(\\geq\\) ne\u017e \u010d\u00edsla v lev\u00e9 \u010d\u00e1sti.</p>"},{"location":"AG1/03_Stromy/3.5_Jednoduch%C3%A9_%C5%99azen%C3%AD/#algo-3.3","title":"Algoritmus InsertSort","text":"<p>Z nese\u0159azen\u00e9 prav\u00e9 \u010d\u00e1sti se vezme prvn\u00ed prvek a vlo\u017e\u00ed se zprava na spr\u00e1vnou pozici v lev\u00e9 se\u0159azen\u00e9 \u010d\u00e1sti.</p> <p>Vlastnosti</p> <ul> <li>Se\u0159ad\u00ed \\(n\\)-prvkov\u00e9 pole v \u010dase \\(O(n^{2})\\)</li> <li>in-place, stabiln\u00ed, datov\u011b citliv\u00fd.</li> </ul> <p>Invariant: Po \\(i\\)-t\u00e9 iteraci je vlevo se\u0159azen\u00e1 posloupnost d\u00e9lky \\(i + 1\\) a vpravo zb\u00fdv\u00e1 \\(n \u2212 1 \u2212 i\\) nese\u0159azen\u00fdch prvk\u016f.</p>"},{"location":"AG1/03_Stromy/3.5_Jednoduch%C3%A9_%C5%99azen%C3%AD/#algo-3.4","title":"Algoritmus BubbleSort","text":"<ul> <li>\u0158azen\u00ed probubl\u00e1v\u00e1n\u00edm v\u011bt\u0161\u00edch prvk\u016f doprava.</li> </ul> <p>Idea</p> <ul> <li>Postupn\u011b zleva doprava se porovn\u00e1vaj\u00ed dvojice sousedn\u00edch prvk\u016f a pokud jsou prvky dvojice v nespr\u00e1vn\u00e9m po\u0159ad\u00ed, prohod\u00ed se.</li> <li>Po prvn\u00edm pr\u016fchodu bubliny se nejv\u011bt\u0161\u00ed prvek dostane na posledn\u00ed m\u00edsto.</li> <li>Cel\u00fd postup se opakuje nejv\u00fd\u0161e \\((n \u2212 1)\\)-kr\u00e1t: poka\u017ed\u00e9 se se\u0159azen\u00e1 podposloupnost vpravo prodlou\u017e\u00ed o jednu pozici doleva.</li> <li>Pokud se b\u011bhem jednoho pr\u016fchodu neprohodila \u017e\u00e1dn\u00e1 dvojice soused\u016f, u\u017e se nikdy \u017e\u00e1dn\u00e1 neprohod\u00ed a \u0159azen\u00ed skon\u010dilo.</li> </ul> <ul> <li>Vhodn\u00fd algoritmus, pokud je nap\u0159. vstupn\u00ed posloupnost z velk\u00e9 \u010d\u00e1sti se\u0159azen\u00e1</li> </ul> <p>Algoritmus</p> BubbleSort<pre><code>end := n\nzmena := 1\nDokud zmena = 1:\n    zmena := 0\n    Pro j := 1 ... (end \u2212 1):\n        Pokud P [j] &gt; P [j + 1]:\n            proho\u010f P [j] a P [j + 1]\n            zmena := 1\n    end\u2212\u2212\n</code></pre>"},{"location":"AG1/03_Stromy/3.5_Jednoduch%C3%A9_%C5%99azen%C3%AD/#theorem-3.8","title":"V\u011bta o korektnosti algoritmu BubbleSort","text":"<p>Algoritmus BubbleSort korektn\u011b se\u0159ad\u00ed \\(n\\)-prvkov\u00e9 pole.</p>"},{"location":"AG1/03_Stromy/3.5_Jednoduch%C3%A9_%C5%99azen%C3%AD/#theorem-3.9","title":"V\u011bta o slo\u017eitosti algoritmu BubbleSort","text":"<p>BubbleSort se\u0159ad\u00ed \\(n\\)-prvkov\u00e9 pole v \u010dase \\(O(n^{2})\\) a je in-place, stabiln\u00ed, datov\u011b citliv\u00fd.</p>"},{"location":"AG1/04_Binomialn%C3%AD_haldy/4.1_Halda_jako_struktura/","title":"4.1 Halda jako struktura","text":""},{"location":"AG1/04_Binomialn%C3%AD_haldy/4.1_Halda_jako_struktura/#zakoreneny-strom-binarni-strom-a-halda","title":"Zako\u0159en\u011bn\u00fd strom, Bin\u00e1rn\u00ed strom a halda","text":"<p>Definice 4.1 (Zako\u0159en\u011bn\u00fd strom)</p> <p>Pozorov\u00e1n\u00ed</p> <p>V\u0161echny \\(v \\in V(T) \u2212 \\{r\\}\\) jsou potomci ko\u0159ene \\(r\\) a ko\u0159en \\(r\\) je p\u0159edkem v\u0161ech ostatn\u00edch vrchol\u016f.</p> <p></p> <p>Definice 4.2 (Bin\u00e1rn\u00ed strom)</p> <p></p> <p>Definice 4.3 (Bin\u00e1rn\u00ed minimov\u00e1 halda)</p> <pre><code>graph TD\n    A(\"3\"):::level0\n    A --&gt; B(\"5\"):::level1\n    A --&gt; C(\"7\"):::level1\n    B --&gt; D(\"11\"):::level2\n    B --&gt; E(\"6\"):::level2\n    C --&gt; F(\"9\"):::level2\n\n\n    classDef level0 fill:#00af00,stroke:#000,stroke-width:2px,color:#fff,shape:circle,align:center;\n    classDef level1 fill:#0000af,stroke:#000,stroke-width:2px,color:#fff,shape:circle,align:center;\n    classDef level2 fill:#afaf00,stroke:#000,stroke-width:2px,color:#fff,shape:circle,align:center;</code></pre> <p>Pozorov\u00e1n\u00ed</p> <p>Na cest\u011b vedouc\u00ed z libovoln\u00e9ho vrcholu do ko\u0159ene tvo\u0159\u00ed kl\u00ed\u010de nerostouc\u00ed posloupnost. V ko\u0159eni je tedy glob\u00e1ln\u00ed minimum ze v\u0161ech kl\u00ed\u010d\u016f.</p>"},{"location":"AG1/04_Binomialn%C3%AD_haldy/4.1_Halda_jako_struktura/#def-4.1","title":"Zako\u0159en\u011bn\u00fd strom","text":"<ul> <li>Zako\u0159en\u011bn\u011bn\u00fd strom je strom \\(T\\), ve kter\u00e9m je jeden vrchol \\(r \\in V(T)\\) ozna\u010den jako ko\u0159en</li> <li>Le\u017e\u00ed-li \\(u\\) na (jedin\u00e9) cest\u011b z \\(v\\) do ko\u0159ene, pak \\(u\\) je p\u0159edek \\(v\\) a \\(v\\) je potomek \\(u\\). Pokud je nav\u00edc \\(\\{u,v\\} \\in E(T)\\) hrana, \u0159\u00edk\u00e1me, \u017ee \\(u\\) je otec \\(v\\) a \\(v\\) je syn \\(u\\).</li> <li>Vrcholy rozd\u011bl\u00edme podle vzd\u00e1lenosti od ko\u0159ene do hladin: v nult\u00e9 le\u017e\u00ed ko\u0159en, v prvn\u00ed jeho synov\u00e9, atd.</li> <li>Hloubka zako\u0159en\u011bn\u00e9ho stromu T je po\u010det jeho hladin.</li> </ul>"},{"location":"AG1/04_Binomialn%C3%AD_haldy/4.1_Halda_jako_struktura/#def-4.2","title":"Bin\u00e1rn\u00ed strom","text":"<p>Strom nazveme bin\u00e1rn\u00ed, pokud</p> <ul> <li>je zako\u0159en\u011bn\u00fd</li> <li>ka\u017ed\u00fd vrchol m\u00e1 nejv\u00fd\u0161e dva syny</li> <li>u syn\u016f rozli\u0161ujeme, kter\u00fd je lev\u00fd a kter\u00fd prav\u00fd.</li> </ul>"},{"location":"AG1/04_Binomialn%C3%AD_haldy/4.1_Halda_jako_struktura/#def-4.3","title":"Bin\u00e1rn\u00ed minimov\u00e1 halda","text":"<p>Bin\u00e1rn\u00ed minimov\u00e1 halda he datov\u00e1 struktura tvaru bin\u00e1rn\u00edho stromu, v jeho\u017e ka\u017ed\u00e9m vrcholu \\(x\\) je ulo\u017een jeden kli\u010d $k(x)# a kter8 spl\u0148uje tyto dv\u011b vlastnosti:</p> <ol> <li>Tvar Haldy: Strom m\u00e1 v\u0161echny hladiny krom\u011b posledn\u00ed pln\u011b obsazen\u00e9. Posledn\u00ed hladina je zapln\u011bna od lev\u00e9ho okraje sm\u011brem k prav\u00e9mu.</li> <li>Haldov\u00e9 uspo\u0159\u00e1d\u00e1n\u00ed: Je-li \\(v\\) vrchol \\(s\\) a jeho syn, plat\u00ed</li> </ol> <p>\\(k(v) \\le k(s)\\)</p>"},{"location":"AG1/04_Binomialn%C3%AD_haldy/4.2_Vlastnosti_haldy/","title":"4.2 Vlastnosti haldy","text":""},{"location":"AG1/04_Binomialn%C3%AD_haldy/4.2_Vlastnosti_haldy/#pocet-hladin-haldy","title":"Po\u010det hladin haldy","text":"<p>V\u011bta 4.1 (O po\u010dtu hladin haldy)</p> D\u016fkaz V\u011bty 4.1 <ul> <li>Bin\u00e1rn\u00ed strom s \\(h \\ge 1\\) \u00fapln\u00fdmi hladinami m\u00e1 n = \\(2^0 + 2^1 + 1^2 ... + 2^{h-1} = 2^h - 1\\) vrchol\u016f</li> <li>Vzhledem ke Tvaru haldy p\u0159ibude nov\u00e1 hladina jen tehdy, kdy\u017e po\u010det prvk\u016f \\(n\\) vzrsote z \\(2^h - 1\\) na \\(2^h\\)</li> <li>Z toho plyne vzorec, nebo\u0165 pr\u00e1v\u011b funkce \\(\\lfloor log(n) \\rfloor\\) se pr\u00e1v\u011b p\u0159i t\u00e9to zm\u011bn\u011b \\(n\\) zv\u011bt\u0161\u00ed o jedna a pro \\(n=2^h - 1\\) je po\u010det hladin \\(h = (h - 1) + 1 = \\lfloor log(2^h - 1) \\rfloor + 1\\).</li> </ul>"},{"location":"AG1/04_Binomialn%C3%AD_haldy/4.2_Vlastnosti_haldy/#def-4.1","title":"O po\u010dtu hladin haldy","text":"<p>Bin\u00e1rn\u00ed halda s \\(n\\) prvky m\u00e1 \\(\\lfloor log(n) \\rfloor + 1\\) hladin.</p>"},{"location":"AG1/04_Binomialn%C3%AD_haldy/4.2_Vlastnosti_haldy/#pocet-listu-haldy","title":"Po\u010det list\u016f haldy","text":"<p>V\u011bta 4.2 (O po\u010dtu list\u016f haldy)</p> D\u016fkaz V\u011bty 4.2 <ul> <li>Indukc\u00ed podle po\u010dtu vrchol\u016f bin\u00e1rn\u00edho stromu.</li> <li>Lemma plat\u00ed trivi\u00e1ln\u011b pro \\(n = 3\\) (2 listy a ko\u0159en \u2013 jedin\u00fd vnit\u0159n\u00ed vrchol).</li> <li>Nech\u0165 \\(n \\gt 3\\) je lich\u00e9. Odebr\u00e1n\u00edm posledn\u00edho listu, kter\u00fd je druh\u00fdm (tj. prav\u00fdm) synem posledn\u00edho vnit\u0159n\u00edho vrcholu, vznikne halda o sud\u00e9 velikosti \\(n\u22121\\), pro kterou z ind. p\u0159edp. lemma plat\u00ed.</li> <li>Vr\u00e1cen\u00edm posledn\u00edho listu se po\u010det vnit\u0159n\u00edch vrchol\u016f nezm\u011bn\u00ed a p\u016fvodn\u00ed strom jich tedy m\u00e1 \\(\\lfloor (n-1)/2 \\rfloor = \\lfloor n/2 \\rfloor\\)</li> <li>A po\u010det list\u016f se zv\u011bt\u0161\u00ed o jedna a p\u016fvodn\u00ed strom jich tedy m\u00e1 \\(\\lceil (n-1)/2 \\rceil + 1 = \\lceil n/2 \\rceil\\)</li> <li>Nech\u0165 \\(n \\ge 4\\) je sud\u00e9. Pak posledn\u00ed list je jedin\u00fd lev\u00fd syn sv\u00e9ho otce.</li> <li>Jeho odebr\u00e1n\u00edm vznikne halda lich\u00e9 velikosti \\(n \u2212 1\\), kter\u00e1 m\u00e1 podle ind. p\u0159edpokladu \\(\\lceil (n \u2212 1)/2 \\rceil\\) list\u016f a \\(\\lfloor (n \u2212 1)/2 \\rfloor\\) vnit\u0159n\u00edch vrchol\u016f.</li> <li>Vr\u00e1cen\u00edm posledn\u00edho listu jeden vnit\u0159n\u00ed vrchol p\u0159ibude a p\u016fvodn\u00ed strom jich tedy m\u00e1 \\(\\lfloor (n \u2212 1)/2 \\rfloor + 1 = \\lfloor n/2 \\rfloor\\).</li> <li>A po\u010det list\u016f se nezm\u011bn\u00ed a p\u016fvodn\u00ed strom jich tedy m\u00e1 \\(\\lceil (n \u2212 1)/2 \\rceil = \\lceil n/2 \\rceil\\).</li> </ul>"},{"location":"AG1/04_Binomialn%C3%AD_haldy/4.2_Vlastnosti_haldy/#def-4.2","title":"O po\u010dtu list\u016f haldy","text":"<p>Bin\u00e1rn\u00ed halda s \\(n \\ge 3\\) prvky m\u00e1 \\(\\lfloor n/2 \\rfloor\\) vnit\u0159n\u00edch vrchol\u016f a \\(\\lceil n/2 \\rceil\\) list\u016f.</p>"},{"location":"AG1/04_Binomialn%C3%AD_haldy/4.3_Operace_na_Hald%C4%9B/","title":"4.3 Operace na Hald\u011b","text":""},{"location":"AG1/04_Binomialn%C3%AD_haldy/4.3_Operace_na_Hald%C4%9B/#binarni-minimova-halda-formalizace","title":"Bin\u00e1rn\u00ed minimov\u00e1 halda \u2013 Formalizace","text":""},{"location":"AG1/04_Binomialn%C3%AD_haldy/4.3_Operace_na_Hald%C4%9B/#binarni-halda-h-ma-atributy","title":"Bin\u00e1rn\u00ed halda H m\u00e1 atributy","text":"<ul> <li>H.root, kter\u00fd je aktu\u00e1ln\u00ed ko\u0159en</li> <li>H.n, kter\u00fd udr\u017euje aktu\u00e1ln\u00ed po\u010det prvk\u016f</li> <li>H.last, kter\u00fd udr\u017euje ukazatel na aktu\u00e1ln\u00ed posledn\u00ed list (nejprav\u011bj\u0161\u00ed list v posledn\u00ed hladin\u011b), pokud existuje</li> </ul>"},{"location":"AG1/04_Binomialn%C3%AD_haldy/4.3_Operace_na_Hald%C4%9B/#prvek-x-haldy-ma","title":"Prvek \\(x\\) haldy m\u00e1","text":"<ul> <li>kl\u00ed\u010d \\(k(x)\\)</li> <li>ukazatel na otce</li> <li>ukazatele na sv\u00e9 syny (jsou-li v hald\u011b obsa\u017een\u00e9)</li> </ul> <p>V dal\u0161\u00edm p\u0159edpokl\u00e1d\u00e1me, \u017ee v\u00fd\u0161e uveden\u00e9 m\u00e1me a um\u00edme p\u0159epo\u010d\u00edtat v \u010dase \\(O(1)\\). Na z\u00e1v\u011br takovou implementaci p\u0159edvedeme.</p>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.1_Binomi%C3%A1ln%C3%AD_stromy/","title":"5.1 Binomi\u00e1ln\u00ed stromy","text":""},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.1_Binomi%C3%A1ln%C3%AD_stromy/#binomialni-minimova-halda","title":"Binomi\u00e1ln\u00ed minimov\u00e1 halda","text":"<ul> <li>Pro p\u0159ehlednost zkracujeme jako BH. Podporuje stejn\u00e9 operace jako bin\u00e1rn\u00ed halda.</li> <li>Nav\u00edc je schopna rychle prov\u00e1d\u011bt operaci slou\u010den\u00ed dvou hald, kter\u00e1 m\u00e1 u bin\u00e1rn\u00ed haldy line\u00e1rn\u00ed slo\u017eitost   (slou\u010dit dv\u011b bin\u00e1rn\u00ed haldy velikost\u00ed \\(m\\) a \\(n\\) m\u00e1 slo\u017eitost operace HeapBuild haldy velikosti \\(m + n\\)).</li> <li>Binomi\u00e1ln\u00ed halda pat\u0159\u00ed do rodiny tzv. mergeable heaps.</li> <li>Dal\u0161\u00ed dobrou vlastnost\u00ed je vynikaj\u00edc\u00ed amortizovan\u00e1 slo\u017eitost operace vkl\u00e1d\u00e1n\u00ed.</li> <li>Nev\u00fdhodou jsou n\u00e1sobn\u011b vy\u0161\u0161\u00ed pam\u011b\u0165ov\u00e9 n\u00e1roky ne\u017e u bin\u00e1rn\u00ed haldy.</li> </ul>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.1_Binomi%C3%A1ln%C3%AD_stromy/#slozitosti-operaci-na-binomialni-halde","title":"Slo\u017eitosti operac\u00ed na binomi\u00e1ln\u00ed hald\u011b","text":"Operace Komplexita Popis BHInsert \\(O(log n), \\Theta^{*}(1)\\) Vlo\u017e\u00ed do BH nov\u00fd prvek. BHFindMin \\(O(1)\\) Vr\u00e1t\u00ed minimum mno\u017einy prvk\u016f BH BHExtractMin \\(O(log n)\\) Odstran\u00ed z BH minimum mno\u017einy jej\u00edch prvk\u016f BHMerge \\(O(log n)\\) Slou\u010d\u00ed dv\u011b BH do jedn\u00e9 BHBuild \\(O(n)\\) Postav\u00ed z \\(n\\) prvk\u016f BH BHDecreaseKey \\(O(log n)\\) Sn\u00ed\u017e\u00ed hodnotu kl\u00ed\u010de prvku BH. BHIncreaseKey \\(O(log n)\\) Zv\u00fd\u0161\u00ed hodnotu kl\u00ed\u010de prvku BH. BHDelete \\(O(log n)\\) Sma\u017ee prvek BH. <p>Definice 5.1 (Binomi\u00e1ln\u00ed strom)</p> <p></p> <p></p> <p>Definice 5.2 (Binomi\u00e1ln\u00ed strom alternativn\u011b)</p> <p></p> <p></p> <p>V\u011bta 5.1 (o izomorfismu \\(B_{k}\\) a \\(B^{\u2032}_{k})\\)</p> <p></p> D\u016fkaz \\(B_{k} \\implies B^{\u2032}_{k}\\) <ol> <li>Matematickou indukc\u00ed podle \\(k\\).</li> <li>Pro \\(k = 0\\) tvrzen\u00ed zjevn\u011b plat\u00ed.</li> <li>Pod ko\u0159enem stromu \\(B_{k}\\) jsou dle jeho definice zav\u011b\u0161eny stromy $B_{0}, . . . , \\(B_{k\u22121}\\).</li> <li>Odtr\u017een\u00edm nejprav\u011bj\u0161\u00edho podstromu \\(B_{k\u22121}\\) od \\(B_{k}\\) v\u0161ak dost\u00e1v\u00e1me podle induk\u010dn\u00edho p\u0159edpokladu strom \\(B_{k\u22121}\\).</li> <li>To d\u00e1v\u00e1 p\u0159esn\u011b definici stromu \\(B^{\u2032}_{k}\\).</li> </ol> D\u016fkaz \\(B^{\u2032}_{k} \\implies B_{k}\\) <ol> <li>Naopak, uv\u00e1\u017e\u00edme-li strom \\(B^{\u2032}_{k}\\), z indukce vypl\u00fdv\u00e1, \u017ee \\(B^{\u2032}_{k\u22121}\\) je izomorfn\u00ed s \\(B_{k\u22121}\\), pod jeho\u017e ko\u0159en jsou dle definice napojeny stromy \\(B_{0}, . . . , B_{k\u22122}.\\)</li> <li>Pod ko\u0159en \\(B^{\u2032}\\) k jsou tud\u00ed\u017e napojeny stromy \\(B_{0}, . . . , B_{k\u22121}.\\)</li> <li>To d\u00e1v\u00e1 p\u0159esn\u011b definici stromu \\(B_{k}.\\)</li> </ol>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.1_Binomi%C3%A1ln%C3%AD_stromy/#def-5.1","title":"Binomi\u00e1ln\u00ed strom","text":"<p>Binomi\u00e1ln\u00ed strom \u0159\u00e1du \\(k\\) (zna\u010d\u00edme \\(B_{k}\\)) je uspo\u0159\u00e1dan\u00fd (t.j. z\u00e1le\u017e\u00ed na po\u0159ad\u00ed syn\u016f) zako\u0159en\u011bn\u00fd strom, pro kter\u00fd plat\u00ed:</p> <ol> <li>\\(B_{0}\\) je tvo\u0159en pouze ko\u0159enem.</li> <li>Pro \\(k \\geq 1\\) z\u00edsk\u00e1me \\(B_{k}\\) ze strom\u016f \\(B_{0}, B_{1}, . . . , B_{k\u22121}\\) tak, \u017ee p\u0159id\u00e1me nov\u00fd ko\u0159en a ko\u0159eny t\u011bchto strom\u016f ud\u011bl\u00e1me (takto popo\u0159ad\u011b) syny nov\u00e9ho ko\u0159ene</li> </ol>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.1_Binomi%C3%A1ln%C3%AD_stromy/#def-5.2","title":"Binomi\u00e1ln\u00ed strom alternativn\u011b","text":"<p>Binomi\u00e1ln\u00ed strom \u0159\u00e1du \\(k\\) (zna\u010d\u00edme \\(B^{\u2032}_{k}\\)) je uspo\u0159\u00e1dan\u00fd zako\u0159en\u011bn\u00fd strom, pro kter\u00fd plat\u00ed:</p> <ul> <li>\\(B^{\u2032}_{0}\\) je tvo\u0159en pouze ko\u0159enem.</li> <li>Pro \\(k \\geq 1\\) se \\(B^{\u2032}_{k}\\) skl\u00e1d\u00e1 ze stromu \\(B^{\u2032}_{k\u22121}\\), pod jeho\u017e ko\u0159enem je jako nejprav\u011bj\u0161\u00ed syn napojen\u00fd dal\u0161\u00ed strom \\(B^{\u2032}_{k\u22121}\\).</li> </ul>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.1_Binomi%C3%A1ln%C3%AD_stromy/#theorem-5.1","title":"V\u011bta o izomorfismu binomi\u00e1ln\u00edch strom\u016f","text":"<p>Stromy \\(B_{k}\\) a \\(B^{\u2032}_{k}\\) jsou izomorfn\u00ed</p>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.1_Binomi%C3%A1ln%C3%AD_stromy/#vlastnosti-binomialnich-stromu","title":"Vlastnosti binomi\u00e1ln\u00edch strom\u016f","text":"<p>V\u011bta 5.2 (o vlastnostech \\(B_{k}\\))</p> D\u016fkaz V\u011bty 5.2 <ol> <li>Indukc\u00ed podle \\(k\\).</li> <li>Strom \\(B_{0}\\) m\u00e1 jist\u011b \\(1\\) hladinu a \\(2^{0} = 1\\) vrchol.</li> <li>Z induk\u010dn\u00edho p\u0159edpokladu vypl\u00fdv\u00e1, \u017ee po\u010det hladin \\(B_{k\u22121}\\) je \\(k\\) a po\u010det vrchol\u016f je \\(2^{k\u22121}\\).  \\(\\implies\\) vlastnosti \\(1\\) a \\(2\\) dok\u00e1z\u00e1ny.</li> <li>U\u017eit\u00edm dok\u00e1zan\u00e9 \u010d\u00e1sti v\u011bty 5.2 dost\u00e1v\u00e1me, \u017ee strom \\(B_{k}\\) je slo\u017een\u00fd ze dvou strom\u016f \\(B_{k\u22121}\\), z nich\u017e jeden je o hladinu n\u00ed\u017ee ne\u017e druh\u00fd, co\u017e d\u00e1v\u00e1 po\u010det hladin \\(k + 1\\) stromu \\(B_{k}\\).</li> <li>Slo\u017een\u00edm dvou strom\u016f \\(B_{k\u22121}\\) dost\u00e1v\u00e1me \\(2 \u00b7 2^{k\u22121} = 2^{k}\\) vrchol\u016f.</li> <li>Stupe\u0148 ko\u0159ene \\(B_{k\u22121}\\) je dle IP k \u2212 1 a p\u0159id\u00e1n\u00edm jednoho nov\u00e9ho syna je stupe\u0148 \\(B_{k}\\) tedy roven \\(k\\)</li> </ol> <p>D\u016fsledek</p> <p>Binomi\u00e1ln\u00ed strom s \\(n\\) vrcholy (pokud existuje) m\u00e1 \\(1 + log n\\) hladin a po\u010det syn\u016f ko\u0159ene \\(log n\\)</p> <p></p> <p>V\u011bta 5.3 (o po\u010dtu vrchol\u016f \\(B_{k}\\) na hladin\u011b \\(i\\))</p> D\u016fkaz V\u011bty 5.3 <ol> <li>Indukc\u00ed podle \u0159\u00e1du \\(k\\).</li> <li>V\u011bta 5.3 plat\u00ed trivi\u00e1ln\u011b pro \\(B_{0}\\) a \\(B_{1}\\) (a \\(B_{2}\\)).</li> <li>Nech\u0165 tedy \\(k \\geq 2\\).</li> <li> <p>Z definice \\(B^{\u2032}_{k}\\) plyne, \u017ee vrcholy \\(B^{\u2032}_{k}\\) na \\(i.\\) hladin\u011b, \\(0 \\lt i \\lt k\\), jsou tvo\u0159eny:</p> <ul> <li>vrcholy lev\u00e9ho \\(B^{\u2032}_{k\u22121}\\) na \\(i.\\) hladin\u011b</li> <li>vrcholy prav\u00e9ho \\(B^{\u2032}_{k\u22121}\\) na \\((i \u2212 1).\\) hladin\u011b.</li> </ul> </li> <li> <p>Z induk\u010dn\u00edho p\u0159edpokladu tedy dostaneme Pascalov\u00fdm pravidlem</p> </li> </ol> \\[ n_{k}(i) = n_{k}(i - 1) = n_{k}(i - 1) = \\binom{k-1}{i} + \\binom {k-1}{i-1} = \\binom{k}{i} \\]"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.1_Binomi%C3%A1ln%C3%AD_stromy/#theorem-5.2","title":"V\u011bta o vlastnostech binomi\u00e1ln\u00edho stromu","text":"<ul> <li>Po\u010det hladin stromu \\(B_{k}\\) je roven \\(k + 1\\)</li> <li>Stupe\u0148 ko\u0159ene je \\(k\\)</li> <li>Po\u010det vrchol\u016f \\(B_{k}\\) je roven \\(2^{k}\\).</li> </ul>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.1_Binomi%C3%A1ln%C3%AD_stromy/#theorem-5.3","title":"V\u011bta o po\u010dtu vrchol\u016f binomi\u00e1ln\u00edho stromu na hladin\u011b","text":"<p>Po\u010det vrchol\u016f stromu \\(B_{k}\\) na \\(i.\\) hladin\u011b \\((i \\in \\{0, . . . , k\\}) = n_{k}(i) = \\binom{k}{i}\\)</p>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.2_Binomi%C3%A1ln%C3%AD_halda/","title":"5.2 Binomi\u00e1ln\u00ed halda","text":"<p>Definice 5.3 (Binomi\u00e1ln\u00ed halda)</p> <p></p>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.2_Binomi%C3%A1ln%C3%AD_halda/#def-5.3","title":"Binomi\u00e1ln\u00ed halda","text":"<p>Binomi\u00e1ln\u00ed halda (BH) obsahuj\u00edc\u00ed \\(n\\) prvk\u016f je uspo\u0159\u00e1dan\u00e1 mno\u017eina binomi\u00e1ln\u00edch strom\u016f \\(T = T_{1}, . . . , T_{\u2113}\\), kde plat\u00ed:</p> <ul> <li>Stromy \\(T_{i}\\) jsou v \\(T\\) uspo\u0159\u00e1d\u00e1ny vzestupn\u011b podle sv\u00fdch \u0159\u00e1d\u016f.</li> <li>\\(n = |V (T_{1})| + \u00b7 \u00b7 \u00b7 + |V (T_{\u2113})|.\\)</li> <li>Pro ka\u017ed\u00e9 nez\u00e1porn\u00e9 \\(k\\) se v mno\u017ein\u011b \\(T\\) vyskytuje nejv\u00fd\u0161e jeden binomi\u00e1ln\u00ed strom \u0159\u00e1du \\(k\\).</li> <li>Ka\u017ed\u00fd vrchol \\(v\\) v ka\u017ed\u00e9m stromu obsahuje kl\u00ed\u010d \\(k(v)\\).</li> <li>Pro ka\u017ed\u00fd strom \\(T_{i}\\) plat\u00ed haldov\u00e9 uspo\u0159\u00e1d\u00e1n\u00ed kl\u00ed\u010d\u016f, \u010dili</li> <li>\\(\\forall v \\in V (T_{i})\\) a pro v\u0161echny jeho syny \\(s_{j} , j = 1, 2, . . . , m,\\) plat\u00ed \\(k(v) \\leq k(s_{j}).\\)</li> </ul>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.2_Binomi%C3%A1ln%C3%AD_halda/#pametova-reprezentace-binomialni-haldy-v-pocitaci","title":"Pam\u011b\u0165ov\u00e1 reprezentace binomi\u00e1ln\u00ed haldy v po\u010d\u00edta\u010di","text":"<ul> <li>Pro ulo\u017een\u00ed uspo\u0159\u00e1dan\u00e9 mno\u017einy strom\u016f \\(\\mathcal{T}\\) BH se pou\u017e\u00edv\u00e1 spojov\u00fd seznam.</li> <li>Seznamy syn\u016f jednotliv\u00fdch vrchol\u016f v binomi\u00e1ln\u00edch stromech budeme tak\u00e9 udr\u017eovat ve spojov\u00fdch seznamech.</li> <li>Konkr\u00e9tn\u00ed implementaci prvku BH si p\u0159edvedeme pozd\u011bji, a\u017e budeme zn\u00e1t po\u017eadavky na operace, kter\u00e9 s BH budeme prov\u00e1d\u011bt.</li> <li>Kl\u00ed\u010d prvku v budeme v pseudok\u00f3du zna\u010dit \\(k(v)\\).</li> </ul>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.2_Binomi%C3%A1ln%C3%AD_halda/#vlastnosti-binomialni-haldy","title":"Vlastnosti binomi\u00e1ln\u00ed haldy","text":"<p>V\u011bta 5.4 (o existenci stromu \\(B_{i}\\) v BH)</p> D\u016fkaz V\u011bty 5.4 <p>Proto\u017ee v BH nelze pou\u017e\u00edt dva binomi\u00e1ln\u00ed stromy stejn\u00e9ho \u0159\u00e1du a  ka\u017ed\u00fd binomi\u00e1ln\u00ed strom \\(B_{i}\\) p\u0159isp\u011bje do \\(n\\)-prvkov\u00e9 BH pr\u00e1v\u011b sv\u00fdmi  \\(|V(B_{i})| = 2i\\) vrcholy, je poskl\u00e1d\u00e1n\u00ed \\(n\\) prvkov\u00e9 BH z binomi\u00e1ln\u00edch strom\u016f ekvivalentn\u00ed z\u00e1pisu \u010d\u00edsla \\(n\\) ve standardn\u00ed dvojkov\u00e9 soustav\u011b.</p> <p>D\u016fsledek</p> <p>n-prvkov\u00e1 BH m\u00e1 a\u017e \\(O(log n)\\) binomi\u00e1ln\u00edch strom\u016f.</p> <p></p>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.2_Binomi%C3%A1ln%C3%AD_halda/#theorem-5.4","title":"V\u011bta o existenci binomi\u00e1ln\u00edho stromu Bi v binomi\u00e1ln\u00ed hald\u011b","text":"<p>Binomi\u00e1ln\u00ed strom \\(B_{i}\\) se vyskytuje v seznamu \\(\\mathcal{T}\\) \\(n\\)-prvkov\u00e9 BH pr\u00e1v\u011b tehdy, kdy\u017e ve dvojkov\u00e9m z\u00e1pisu \\(b_{k}b_{k\u22121} . . . b_{0}\\) \u010d\u00edsla \\(n\\) je \\(b_{i} = 1\\).</p>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.3_Operace_na_BH/","title":"5.3 Operace na BH","text":""},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.3_Operace_na_BH/#nalezeni-minima-bhfindminh","title":"Nalezen\u00ed minima \u2013 BHFindMin(H):","text":"<ul> <li>Minimum cel\u00e9 BH se mus\u00ed nach\u00e1zet v jednom z ko\u0159en\u016f strom\u016f \\(T_{i}\\).</li> <li>Sta\u010d\u00ed proj\u00edt seznam \\(\\mathcal{T}\\) , co\u017e bude trvat \u010das \\(O(log n)\\).</li> <li>Pou\u017e\u00edv\u00e1me-li tuto funkci \u010dasto, vyplat\u00ed se udr\u017eovat ukazatel na tento glob\u00e1ln\u011b nejmen\u0161\u00ed ko\u0159en. Operaci BHFindMin   lze pak prov\u00e9st v konstantn\u00edm \u010dase.</li> </ul>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.3_Operace_na_BH/#slouceni-dvou-bh-bhmerge","title":"Slou\u010den\u00ed dvou BH \u2013 BHMerge","text":"<ul> <li>Slou\u010den\u00ed dvou BH pop\u00ed\u0161eme nejd\u0159\u00edve, proto\u017ee se pomoc\u00ed n\u011bho realizuj\u00ed ostatn\u00ed operace.</li> <li>Operace BHMerge ze dvou BH vytvo\u0159\u00ed jedinou, obsahuj\u00edc\u00ed sjednocen\u00ed prvk\u016f obou vstupn\u00edch BH.</li> <li>Nejprve pop\u00ed\u0161eme operaci BHMergeTree, kter\u00e1 slije dohromady dva binomi\u00e1ln\u00ed stromy stejn\u00e9ho \u0159\u00e1du \\(B_{i}\\) a   vytvo\u0159\u00ed strom \\(B_{i+1}\\)   (na to lze nahl\u00ed\u017eet i jako na slou\u010den\u00ed dvou BH tvo\u0159en\u00fdch jedin\u00fdm binomi\u00e1ln\u00edm stromem stejn\u00e9ho \u0159\u00e1du).</li> </ul> <p>Algoritmus 5.1 (BHMergeTree)</p> <p>Pozorov\u00e1n\u00ed</p> <p>Algoritmus BHMergeTree\\((T_{1}, T_{2})\\), kde \u0159\u00e1d(\\(T_{1}\\)) \\(=\\) \u0159\u00e1d(\\(T_{2}\\)), vytvo\u0159\u00ed korektn\u00ed binomi\u00e1ln\u00ed strom s \u0159\u00e1dem \u0159\u00e1d(\\(T_{1}\\)) \\(+ 1\\)</p> <p>Tvrzen\u00ed</p> <p>BH lze implementovat tak, \u017ee BHMergeTree\\((T_{1}, T_{2})\\) m\u00e1 \u010dasovou slo\u017eitost \\(O(1).\\)</p> <p></p>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.3_Operace_na_BH/#algo-5.1","title":"Algoritmus BHMergeTree","text":"<p>Vstup</p> <p>Binomi\u00e1ln\u00ed stromy \\(T_{1}, T_{2}\\) takov\u00e9, \u017ee \u0159\u00e1d(\\(T_{1}\\)) = \u0159\u00e1d(\\(T_{2}\\))</p> <p>V\u00fdstup</p> <p>V\u00fdsledn\u00fd strom \\(T_{out}\\)</p> <p>Algoritmus</p> <pre><code>Pokud k(ko\u0159en(T1)) \u2264 k(ko\u0159en(T2)):\n    P\u0159ipoj ko\u0159en(T2) jako nejprav\u011bj\u0161\u00edho syna pod ko\u0159en(T1).\n    Tout := T1\nJinak:\n    P\u0159ipoj ko\u0159en(T1) jako nejprav\u011bj\u0161\u00edho syna pod ko\u0159en(T2).\nTout := T2\n</code></pre>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.3_Operace_na_BH/#idea-algoritmu-bhmerge-pro-slouceni-dvou-bh","title":"Idea algoritmu BHMerge pro slou\u010den\u00ed dvou BH","text":"<ul> <li>M\u011bjme BH \\(A\\) a \\(B\\), kde po\u010det prvk\u016f \\(A\\) je \\(a\\) a v bin\u00e1rn\u00edm z\u00e1pise \\(a = a_{k}a_{k\u22121} . . . a_{0}\\) a po\u010det prvk\u016f \\(B\\) je \\(b = b_{\u2113}b_{\u2113\u22121} . . . b_{0}.\\)</li> <li>V\u00fdsledn\u00e1 halda \\(C\\) bude m\u00edt \\(c = a + b\\) prvk\u016f, \\(c = c_{m}c_{m\u22121} . . . c_{0}.\\)</li> <li>\u0158\u00e1dy binomi\u00e1ln\u00edch strom\u016f ve v\u0161ech t\u0159\u00ed hald\u00e1ch jsou jednozna\u010dn\u011b ur\u010deny bin\u00e1rn\u00edm z\u00e1pisem jejich po\u010dtu prvk\u016f.</li> <li> <p>P\u0159ipome\u0148me \"\u0161koln\u00ed\" algoritmus na s\u010d\u00edt\u00e1n\u00ed bin\u00e1rn\u00edch \u010d\u00edsel \\(a\\) a \\(b\\) pod sebou:      jdeme od nejni\u017e\u0161\u00edch \u0159\u00e1d\u016f bin\u00e1rn\u00edho z\u00e1pisu k nejvy\u0161\u0161\u00edm a</p> <ul> <li>v\u00fdsledn\u00fd bit \\(c_{i} = (a_{i} + b_{i} +\\) carry\\(_{i})\\) mod \\(2\\), kde carry\\(_{i}\\) je tzv. p\u0159enos z p\u0159edchoz\u00edho \u0159\u00e1du a</li> <li>n\u00e1sledn\u011b carry\\(_{i+1}\\) := \\((a_{i} + b_{i} +\\) carry\\(_{i}\\)) div \\(2.\\)</li> </ul> </li> </ul>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.3_Operace_na_BH/#binarni-scitani-priklad","title":"Bin\u00e1rn\u00ed s\u010d\u00edt\u00e1n\u00ed - p\u0159\u00edklad","text":"<ul> <li>\\(c_{i} = (a_{i} + b_{i} +\\) carry\\(_{i}\\)) mod \\(2\\)</li> <li>carry\\(_{i+1}\\) := \\((a_{i} + b_{i} +\\) carry\\(_{i})\\) div \\(2\\)</li> </ul>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.3_Operace_na_BH/#aplikace-binarniho-scitani-na-bh","title":"Aplikace bin\u00e1rn\u00edho s\u010d\u00edt\u00e1n\u00ed na BH","text":"<p>Algoritmus na vytvo\u0159en\u00ed BH \\(C\\) nyn\u00ed zrcadl\u00ed p\u0159edchoz\u00ed algoritmus s\u010d\u00edt\u00e1n\u00ed bin\u00e1rn\u00edch \u010d\u00edsel s t\u00edm rozd\u00edlem, \u017ee:</p> <ol> <li>Bity \\(a_{i}, b_{i},\\) carry\\(_{i}\\) budou nyn\u00ed binomi\u00e1ln\u00ed stromy \\(A_{i}\\), \\(B_{i}\\), carry\\(_{i}\\) \u0159\u00e1du \\(i\\) nebo pr\u00e1zdn\u00e9.</li> <li>M\u00edsto s\u010d\u00edt\u00e1n\u00ed dvou jedni\u010dkov\u00fdch bit\u016f vol\u00e1me BHMergeTree na dva binomi\u00e1ln\u00ed stromy stejn\u00e9ho \u0159\u00e1du, co\u017e vytvo\u0159\u00ed strom vy\u0161\u0161\u00edho \u0159\u00e1du a tedy p\u0159enos carry do dal\u0161\u00edho \u0159\u00e1du.</li> <li>Jsou-li v\u0161echny t\u0159i stromy \\(A_{i}, B_{i},\\) carry\\(_{i}\\) nepr\u00e1zdn\u00e9, slou\u010d\u00edme \\(A_{i}\\) a \\(B_{i}\\) a v\u00fdsledek se stane p\u0159enosem do vy\u0161\u0161\u00edho \u0159\u00e1du carry\\(_{i+1}\\) a do \\(C_{i}\\) p\u0159i\u0159ad\u00edme carry\\(_{i}\\).</li> <li>Proto\u017ee udr\u017eujeme seznamy binomi\u00e1ln\u00edch strom\u016f BH uspo\u0159\u00e1dan\u00e9 dle jejich \u0159\u00e1d\u016f, lze algoritmus realizovat pr\u016fchodem dvou ukazatel\u016f po t\u011bchto seznamech a p\u0159eskakov\u00e1n\u00edm \u0159\u00e1d\u016f strom\u016f nep\u0159\u00edtomn\u00fdch v BH.</li> </ol> <p></p> <p></p> <p>Algoritmus 5.2 (BHMerge)</p> <p></p> <p>V\u011bta 5.5 (o korektnosti a slo\u017eitosti algoritmu BHMerge)</p> D\u016fkaz V\u011bty 5.5 <ol> <li>V ka\u017ed\u00e9 iteraci se zpracuj\u00ed v\u0161echny stromy \u0159\u00e1du akt_rad.</li> <li>N\u00e1sledn\u011b se akt_rad zv\u00fd\u0161\u00ed o jedna.</li> <li>V\u0161echny operace uvnit\u0159 cyklu trvaj\u00ed \u010das \\(O(1)\\).</li> <li>Nejvy\u0161\u0161\u00ed \u0159\u00e1d je \\(O(log n)\\), celkov\u00fd \u010das je tedy \\(O(log n)\\).</li> </ol>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.3_Operace_na_BH/#algo-5.2","title":"Algoritmus BHMerge","text":"BHMerge(A, B)<pre><code>scitanci[0 . . . 2]         //pole aktu\u00e1ln\u00edch s\u010d\u00edtanc\u016f\ncarry := null               //p\u0159enos\nneprazdnych := 2            //po\u010det zb\u00fdvaj\u00edc\u00edch s\u010d\u00edtanc\u016f\nakt_rad := 0                //aktu\u00e1ln\u00ed \u0159\u00e1d\nDokud neprazdnych \u2265 2:\n    neprazdnych := 0\n    pocet := 0              //po\u010det s\u010d\u00edtanc\u016f v aktu\u00e1ln\u00edm \u0159\u00e1du\n    Pokud A je nepr\u00e1zdn\u00e1:\n        neprazdnych++\n        a := strom nejni\u017e\u0161\u00edho \u0159\u00e1du v A\n        Pokud \u0159\u00e1d(a) = akt_rad:\n            scitanci[pocet]:= a\n            pocet++\n            vy\u0159a\u010f a z A\n    Pokud B je nepr\u00e1zdn\u00e1:\n        neprazdnych++\n        b := strom nejni\u017e\u0161\u00edho \u0159\u00e1du v B\n        Pokud \u0159\u00e1d(b) = akt_rad:\n            scitanci[pocet]:= b\n            pocet++\n            vy\u0159a\u010f b z B\n    Pokud carry nen\u00ed null:\n        neprazdnych++\n        scitanci[pocet]:= carry\n        pocet++\n        carry:= null\n\n    Pokud pocet= 3:\n        zapi\u0161 scitanci[2] do v\u00fdstupu C\n        carry := BHMergeTree(scitanci[0], scitanci[1])\n    Pokud pocet= 2:\n        carry := BHMergeTree(scitanci[0], scitanci[1])\n    Pokud pocet= 1:\n        zapi\u0161 scitanci[0] do v\u00fdstupu C\nakt_rad++\nP\u0159e\u0159a\u010f do C zbytek BH A nebo B (pokud je\u0161t\u011b n\u011bco zb\u00fdv\u00e1)\nP\u0159epoj ukazatel na minimum na men\u0161\u00ed z minim z A a B\n</code></pre>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.3_Operace_na_BH/#theorem-5.5","title":"V\u011bta o korektnosti a slo\u017eitosti BHMerge","text":"<p>Algoritmus BHMerge je korektn\u00ed a jeho \u010dasov\u00e1 slo\u017eitost je \\(O(log n).\\)</p>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.3_Operace_na_BH/#vkladani-prvku-do-bh-bhinsert","title":"Vkl\u00e1d\u00e1n\u00ed prvku do BH - BHInsert","text":"<p>Algoritmus 5.3 (BHInsert)</p> <p></p> <p></p> <p>V\u011bta 5.6 (o slo\u017eitosti algoritmu BHInsert)</p> D\u016fkaz V\u011bty 5.6 <ol> <li>V\u00edme, \u017ee binomi\u00e1ln\u00ed stromy tvo\u0159\u00edc\u00ed \\(n\\)-prvkovou BH p\u0159esn\u011b odpov\u00eddaj\u00ed jedni\u010dkov\u00fdm bit\u016fm v dvojkov\u00e9m z\u00e1pisu \u010d\u00edsla \\(n\\).</li> <li>Operace BHInsert je slou\u010den\u00ed s jednoprvkovou BH a to odpov\u00edd\u00e1 operaci Inc bin\u00e1rn\u00ed s\u010d\u00edta\u010dky.</li> <li>Proveden\u00ed operace BHMergeTree s \\(O(1)\\) slo\u017eitost\u00ed b\u011bhem BHInsert odpov\u00edd\u00e1 bitov\u00e9 inverzi v operaci Inc.</li> <li>Dle anal\u00fdzy bin\u00e1rn\u00ed s\u010d\u00edta\u010dky m\u00e1 tedy operace BHInsert amortizovanou slo\u017eitost \\(O^{*}(1)\\).</li> </ol>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.3_Operace_na_BH/#algo-5.3","title":"Algoritmus BHInsert","text":"BHInsert(H,x):<pre><code>Vytvo\u0159\u00edme BH H\u2032 s jedin\u00fdm prvkem x.\nBHMerge(H, H\u2032)\n</code></pre>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.3_Operace_na_BH/#theorem-5.6","title":"V\u011bta o slo\u017eitosti algoritmu BHInsert","text":"<p>Operace BHInsert m\u00e1 v nejhor\u0161\u00edm p\u0159\u00edpad\u011b slo\u017eitost \\(O(log n).\\) Pro na po\u010d\u00e1tku pr\u00e1zdnou BH trv\u00e1 posloupnost \\(n\\) vol\u00e1n\u00ed operace BHInsert \u010das \\(O(n).\\) BHInsert m\u00e1 tedy amortizovanou \u010dasovou slo\u017eitost \\(O^{*}(1).\\)</p>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.3_Operace_na_BH/#vytvoreni-n-prvkove-bh-bhbuild","title":"Vytvo\u0159en\u00ed n prvkov\u00e9 BH \u2013 BHBuild","text":"<ul> <li>Vol\u00e1n\u00edm BHInsert \\(n\\) kr\u00e1t po sob\u011b vytvo\u0159\u00edme BH o velikosti \\(n.\\)</li> <li>Podle p\u0159edchoz\u00ed anal\u00fdzy bude trvat vytvo\u0159en\u00ed \\(n\\)-prvkov\u00e9 BH \u010das \\(O(n).\\)</li> </ul>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.3_Operace_na_BH/#odstraneni-minima-z-bh-bhextractmin","title":"Odstran\u011bn\u00ed minima z BH \u2013 BHExtractMin","text":"<p>Algoritmus 5.4 (BHInsert)</p> <p>(4)  Z T vytvo\u0159 novou BH H\u2032 </p> <ul> <li>Pot\u0159ebujeme v \u010dase \\(O(log n)\\) vytvo\u0159it BH ze syn\u016f (podstrom\u016f) stromu \\(\\mathcal{T}\\) .</li> <li>Toho pot\u0159ebujeme dos\u00e1hnout p\u0159i zachov\u00e1n\u00ed \\(O(1)\\) \u010dasu pro BHMergeTree</li> </ul> <p></p> <p></p> <p>V\u011bta 5.7 (o slo\u017eitosti algoritmu BHExtractMin)</p> D\u016fkaz V\u011bty 5.7 <ol> <li>Krok \\((1)\\) trv\u00e1 \u010das \\(O(1)\\), sta\u010d\u00ed si udr\u017eovat minimov\u00fd ukazatel na strom a vypojit ho ze seznamu.</li> <li>Kroky \\((2)\\) a \\((4)\\) trvaj\u00ed \\(O(log n)\\), proto\u017ee ko\u0159en binomi\u00e1ln\u00edho stromu m\u00e1 nejv\u00fd\u0161e \\(O(log n)\\) syn\u016f.</li> <li>Slou\u010den\u00ed hald trv\u00e1 \\(O(log n)\\), v\u010detn\u011b rekonstrukce minimov\u00e9ho ukazatele</li> </ol>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.3_Operace_na_BH/#algo-5.4","title":"Algoritmus BHInsert","text":"<pre><code>Najdi v BH H strom T , jeho\u017e ko\u0159en je minimem.\nOdpoj tento strom T z BH H.\nOdtrhni z T jeho ko\u0159en.\nZ T vytvo\u0159 novou BH H\u2032. -&gt; POZOR\nProve\u010f BHMerge(H, H\u2032). \n</code></pre>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.3_Operace_na_BH/#theorem-5.7","title":"V\u011bta o slo\u017eitosti algoritmu BHExtractMin","text":"<ul> <li>\u010casov\u00e1 slo\u017eitost operace BHExtractMin je \\(O(log n)\\).</li> </ul>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.4_Reprezentace/","title":"5.4 Reprezentace","text":""},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.4_Reprezentace/#pametova-reprezentace-prvku-bh","title":"Pam\u011b\u0165ov\u00e1 reprezentace prvk\u016f BH","text":"<p>Prvek v BH bude v po\u010d\u00edta\u010di reprezentov\u00e1n pomoc\u00ed n\u00e1sleduj\u00edc\u00ed struktury:</p> <ul> <li>Ukazatel na otce</li> <li>Ukazatel na lev\u00e9ho sourozence</li> <li>Ukazatel na nejprav\u011bj\u0161\u00edho syna</li> <li>Hodnota \\(k(v)\\)</li> </ul> <p>Tvrzen\u00ed</p> <p>BHMergeTree i vytvo\u0159en\u00ed BH ze seznamu syn\u016f ko\u0159ene lze v \u010dase \\(O(log n)\\), kde \\(n\\) je po\u010det prvk\u016f ve v\u00fdsledn\u00e9 BH</p> <p></p> K Zamy\u0161len\u00ed <p>Jak v minimov\u00e9 BH ud\u011blat operace:</p> <ul> <li>BHDecreaseKey v \u010dase \\(O(log n)\\)?</li> <li>BHDelete v \u010dase \\(O(log n)\\)?</li> <li>BHIncreaseKey v \u010dase \\(O(log n)\\)?</li> </ul> <p>V\u0161echny operace dostanou ukazatel na prvek, se kter\u00fdm se pracuje</p>"},{"location":"AG1/05_Binomi%C3%A1ln%C3%AD_haldy/5.4_Reprezentace/#srovnani-binarni-a-binomialni-haldy","title":"Srovn\u00e1n\u00ed bin\u00e1rn\u00ed a binomi\u00e1ln\u00ed haldy","text":"Operace Bin\u00e1rn\u00ed Binomi\u00e1ln\u00ed Vlo\u017een\u00ed prvku do haldy velikosti \\(n\\) \\(O^{*}(log n), O(log n)\\) \\(O^{*}(1), O(log n)\\) ExtractMin z haldy velikosti \\(n\\) \\(O(log n)\\) \\(O(log n)\\) Slou\u010den\u00ed 2 hald velikosti \\(n\\) \\(O(n)\\) \\(O(log n)\\) <p>Binomi\u00e1ln\u00ed haldy jsou nejjednodu\u0161\u0161\u00edm \u0159e\u0161en\u00edm tzv. mergeable heaps, kter\u00e9 dok\u00e1\u017eou velmi efektivn\u011b prov\u00e9st operaci slou\u010den\u00ed  a ostatn\u00ed operace maj\u00ed na operaci slou\u010den\u00ed postaven\u00e9.</p>"},{"location":"MA2/","title":"MA2","text":""}]}